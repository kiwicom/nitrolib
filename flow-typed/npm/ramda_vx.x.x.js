// flow-typed signature: 2a5ed568323a7b784a1992ff922e073d
// flow-typed version: <<STUB>>/ramda_v0.26.1/flow_v0.87.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'ramda'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'ramda' {
  declare module.exports: any;
}

/**
 * We include stubs for each file inside this npm package in case you need to
 * require those files directly. Feel free to delete any files that aren't
 * needed.
 */
declare module 'ramda/dist/ramda' {
  declare module.exports: any;
}

declare module 'ramda/dist/ramda.min' {
  declare module.exports: any;
}

declare module 'ramda/es/__' {
  declare module.exports: any;
}

declare module 'ramda/es/add' {
  declare module.exports: any;
}

declare module 'ramda/es/addIndex' {
  declare module.exports: any;
}

declare module 'ramda/es/adjust' {
  declare module.exports: any;
}

declare module 'ramda/es/all' {
  declare module.exports: any;
}

declare module 'ramda/es/allPass' {
  declare module.exports: any;
}

declare module 'ramda/es/always' {
  declare module.exports: any;
}

declare module 'ramda/es/and' {
  declare module.exports: any;
}

declare module 'ramda/es/any' {
  declare module.exports: any;
}

declare module 'ramda/es/anyPass' {
  declare module.exports: any;
}

declare module 'ramda/es/ap' {
  declare module.exports: any;
}

declare module 'ramda/es/aperture' {
  declare module.exports: any;
}

declare module 'ramda/es/append' {
  declare module.exports: any;
}

declare module 'ramda/es/apply' {
  declare module.exports: any;
}

declare module 'ramda/es/applySpec' {
  declare module.exports: any;
}

declare module 'ramda/es/applyTo' {
  declare module.exports: any;
}

declare module 'ramda/es/ascend' {
  declare module.exports: any;
}

declare module 'ramda/es/assoc' {
  declare module.exports: any;
}

declare module 'ramda/es/assocPath' {
  declare module.exports: any;
}

declare module 'ramda/es/binary' {
  declare module.exports: any;
}

declare module 'ramda/es/bind' {
  declare module.exports: any;
}

declare module 'ramda/es/both' {
  declare module.exports: any;
}

declare module 'ramda/es/call' {
  declare module.exports: any;
}

declare module 'ramda/es/chain' {
  declare module.exports: any;
}

declare module 'ramda/es/clamp' {
  declare module.exports: any;
}

declare module 'ramda/es/clone' {
  declare module.exports: any;
}

declare module 'ramda/es/comparator' {
  declare module.exports: any;
}

declare module 'ramda/es/complement' {
  declare module.exports: any;
}

declare module 'ramda/es/compose' {
  declare module.exports: any;
}

declare module 'ramda/es/composeK' {
  declare module.exports: any;
}

declare module 'ramda/es/composeP' {
  declare module.exports: any;
}

declare module 'ramda/es/composeWith' {
  declare module.exports: any;
}

declare module 'ramda/es/concat' {
  declare module.exports: any;
}

declare module 'ramda/es/cond' {
  declare module.exports: any;
}

declare module 'ramda/es/construct' {
  declare module.exports: any;
}

declare module 'ramda/es/constructN' {
  declare module.exports: any;
}

declare module 'ramda/es/contains' {
  declare module.exports: any;
}

declare module 'ramda/es/converge' {
  declare module.exports: any;
}

declare module 'ramda/es/countBy' {
  declare module.exports: any;
}

declare module 'ramda/es/curry' {
  declare module.exports: any;
}

declare module 'ramda/es/curryN' {
  declare module.exports: any;
}

declare module 'ramda/es/dec' {
  declare module.exports: any;
}

declare module 'ramda/es/defaultTo' {
  declare module.exports: any;
}

declare module 'ramda/es/descend' {
  declare module.exports: any;
}

declare module 'ramda/es/difference' {
  declare module.exports: any;
}

declare module 'ramda/es/differenceWith' {
  declare module.exports: any;
}

declare module 'ramda/es/dissoc' {
  declare module.exports: any;
}

declare module 'ramda/es/dissocPath' {
  declare module.exports: any;
}

declare module 'ramda/es/divide' {
  declare module.exports: any;
}

declare module 'ramda/es/drop' {
  declare module.exports: any;
}

declare module 'ramda/es/dropLast' {
  declare module.exports: any;
}

declare module 'ramda/es/dropLastWhile' {
  declare module.exports: any;
}

declare module 'ramda/es/dropRepeats' {
  declare module.exports: any;
}

declare module 'ramda/es/dropRepeatsWith' {
  declare module.exports: any;
}

declare module 'ramda/es/dropWhile' {
  declare module.exports: any;
}

declare module 'ramda/es/either' {
  declare module.exports: any;
}

declare module 'ramda/es/empty' {
  declare module.exports: any;
}

declare module 'ramda/es/endsWith' {
  declare module.exports: any;
}

declare module 'ramda/es/eqBy' {
  declare module.exports: any;
}

declare module 'ramda/es/eqProps' {
  declare module.exports: any;
}

declare module 'ramda/es/equals' {
  declare module.exports: any;
}

declare module 'ramda/es/evolve' {
  declare module.exports: any;
}

declare module 'ramda/es/F' {
  declare module.exports: any;
}

declare module 'ramda/es/filter' {
  declare module.exports: any;
}

declare module 'ramda/es/find' {
  declare module.exports: any;
}

declare module 'ramda/es/findIndex' {
  declare module.exports: any;
}

declare module 'ramda/es/findLast' {
  declare module.exports: any;
}

declare module 'ramda/es/findLastIndex' {
  declare module.exports: any;
}

declare module 'ramda/es/flatten' {
  declare module.exports: any;
}

declare module 'ramda/es/flip' {
  declare module.exports: any;
}

declare module 'ramda/es/forEach' {
  declare module.exports: any;
}

declare module 'ramda/es/forEachObjIndexed' {
  declare module.exports: any;
}

declare module 'ramda/es/fromPairs' {
  declare module.exports: any;
}

declare module 'ramda/es/groupBy' {
  declare module.exports: any;
}

declare module 'ramda/es/groupWith' {
  declare module.exports: any;
}

declare module 'ramda/es/gt' {
  declare module.exports: any;
}

declare module 'ramda/es/gte' {
  declare module.exports: any;
}

declare module 'ramda/es/has' {
  declare module.exports: any;
}

declare module 'ramda/es/hasIn' {
  declare module.exports: any;
}

declare module 'ramda/es/hasPath' {
  declare module.exports: any;
}

declare module 'ramda/es/head' {
  declare module.exports: any;
}

declare module 'ramda/es/identical' {
  declare module.exports: any;
}

declare module 'ramda/es/identity' {
  declare module.exports: any;
}

declare module 'ramda/es/ifElse' {
  declare module.exports: any;
}

declare module 'ramda/es/inc' {
  declare module.exports: any;
}

declare module 'ramda/es/includes' {
  declare module.exports: any;
}

declare module 'ramda/es/index' {
  declare module.exports: any;
}

declare module 'ramda/es/indexBy' {
  declare module.exports: any;
}

declare module 'ramda/es/indexOf' {
  declare module.exports: any;
}

declare module 'ramda/es/init' {
  declare module.exports: any;
}

declare module 'ramda/es/innerJoin' {
  declare module.exports: any;
}

declare module 'ramda/es/insert' {
  declare module.exports: any;
}

declare module 'ramda/es/insertAll' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_aperture' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_arity' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_arrayFromIterator' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_assertPromise' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_checkForMethod' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_clone' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_cloneRegExp' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_complement' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_concat' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_createPartialApplicator' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_curry1' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_curry2' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_curry3' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_curryN' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_dispatchable' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_dropLast' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_dropLastWhile' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_equals' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_filter' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_flatCat' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_forceReduced' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_functionName' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_functionsWith' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_has' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_identity' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_includes' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_includesWith' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_indexOf' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_isArguments' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_isArray' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_isArrayLike' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_isFunction' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_isInteger' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_isNumber' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_isObject' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_isPlaceholder' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_isRegExp' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_isString' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_isTransformer' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_makeFlat' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_map' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_objectAssign' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_objectIs' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_of' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_pipe' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_pipeP' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_quote' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_reduce' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_reduced' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_Set' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_stepCat' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_toISOString' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_toString' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xall' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xany' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xaperture' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xchain' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xdrop' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xdropLast' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xdropLastWhile' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xdropRepeatsWith' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xdropWhile' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xfBase' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xfilter' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xfind' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xfindIndex' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xfindLast' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xfindLastIndex' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xmap' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xreduceBy' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xtake' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xtakeWhile' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xtap' {
  declare module.exports: any;
}

declare module 'ramda/es/internal/_xwrap' {
  declare module.exports: any;
}

declare module 'ramda/es/intersection' {
  declare module.exports: any;
}

declare module 'ramda/es/intersperse' {
  declare module.exports: any;
}

declare module 'ramda/es/into' {
  declare module.exports: any;
}

declare module 'ramda/es/invert' {
  declare module.exports: any;
}

declare module 'ramda/es/invertObj' {
  declare module.exports: any;
}

declare module 'ramda/es/invoker' {
  declare module.exports: any;
}

declare module 'ramda/es/is' {
  declare module.exports: any;
}

declare module 'ramda/es/isEmpty' {
  declare module.exports: any;
}

declare module 'ramda/es/isNil' {
  declare module.exports: any;
}

declare module 'ramda/es/join' {
  declare module.exports: any;
}

declare module 'ramda/es/juxt' {
  declare module.exports: any;
}

declare module 'ramda/es/keys' {
  declare module.exports: any;
}

declare module 'ramda/es/keysIn' {
  declare module.exports: any;
}

declare module 'ramda/es/last' {
  declare module.exports: any;
}

declare module 'ramda/es/lastIndexOf' {
  declare module.exports: any;
}

declare module 'ramda/es/length' {
  declare module.exports: any;
}

declare module 'ramda/es/lens' {
  declare module.exports: any;
}

declare module 'ramda/es/lensIndex' {
  declare module.exports: any;
}

declare module 'ramda/es/lensPath' {
  declare module.exports: any;
}

declare module 'ramda/es/lensProp' {
  declare module.exports: any;
}

declare module 'ramda/es/lift' {
  declare module.exports: any;
}

declare module 'ramda/es/liftN' {
  declare module.exports: any;
}

declare module 'ramda/es/lt' {
  declare module.exports: any;
}

declare module 'ramda/es/lte' {
  declare module.exports: any;
}

declare module 'ramda/es/map' {
  declare module.exports: any;
}

declare module 'ramda/es/mapAccum' {
  declare module.exports: any;
}

declare module 'ramda/es/mapAccumRight' {
  declare module.exports: any;
}

declare module 'ramda/es/mapObjIndexed' {
  declare module.exports: any;
}

declare module 'ramda/es/match' {
  declare module.exports: any;
}

declare module 'ramda/es/mathMod' {
  declare module.exports: any;
}

declare module 'ramda/es/max' {
  declare module.exports: any;
}

declare module 'ramda/es/maxBy' {
  declare module.exports: any;
}

declare module 'ramda/es/mean' {
  declare module.exports: any;
}

declare module 'ramda/es/median' {
  declare module.exports: any;
}

declare module 'ramda/es/memoizeWith' {
  declare module.exports: any;
}

declare module 'ramda/es/merge' {
  declare module.exports: any;
}

declare module 'ramda/es/mergeAll' {
  declare module.exports: any;
}

declare module 'ramda/es/mergeDeepLeft' {
  declare module.exports: any;
}

declare module 'ramda/es/mergeDeepRight' {
  declare module.exports: any;
}

declare module 'ramda/es/mergeDeepWith' {
  declare module.exports: any;
}

declare module 'ramda/es/mergeDeepWithKey' {
  declare module.exports: any;
}

declare module 'ramda/es/mergeLeft' {
  declare module.exports: any;
}

declare module 'ramda/es/mergeRight' {
  declare module.exports: any;
}

declare module 'ramda/es/mergeWith' {
  declare module.exports: any;
}

declare module 'ramda/es/mergeWithKey' {
  declare module.exports: any;
}

declare module 'ramda/es/min' {
  declare module.exports: any;
}

declare module 'ramda/es/minBy' {
  declare module.exports: any;
}

declare module 'ramda/es/modulo' {
  declare module.exports: any;
}

declare module 'ramda/es/move' {
  declare module.exports: any;
}

declare module 'ramda/es/multiply' {
  declare module.exports: any;
}

declare module 'ramda/es/nAry' {
  declare module.exports: any;
}

declare module 'ramda/es/negate' {
  declare module.exports: any;
}

declare module 'ramda/es/none' {
  declare module.exports: any;
}

declare module 'ramda/es/not' {
  declare module.exports: any;
}

declare module 'ramda/es/nth' {
  declare module.exports: any;
}

declare module 'ramda/es/nthArg' {
  declare module.exports: any;
}

declare module 'ramda/es/o' {
  declare module.exports: any;
}

declare module 'ramda/es/objOf' {
  declare module.exports: any;
}

declare module 'ramda/es/of' {
  declare module.exports: any;
}

declare module 'ramda/es/omit' {
  declare module.exports: any;
}

declare module 'ramda/es/once' {
  declare module.exports: any;
}

declare module 'ramda/es/or' {
  declare module.exports: any;
}

declare module 'ramda/es/otherwise' {
  declare module.exports: any;
}

declare module 'ramda/es/over' {
  declare module.exports: any;
}

declare module 'ramda/es/pair' {
  declare module.exports: any;
}

declare module 'ramda/es/partial' {
  declare module.exports: any;
}

declare module 'ramda/es/partialRight' {
  declare module.exports: any;
}

declare module 'ramda/es/partition' {
  declare module.exports: any;
}

declare module 'ramda/es/path' {
  declare module.exports: any;
}

declare module 'ramda/es/pathEq' {
  declare module.exports: any;
}

declare module 'ramda/es/pathOr' {
  declare module.exports: any;
}

declare module 'ramda/es/pathSatisfies' {
  declare module.exports: any;
}

declare module 'ramda/es/pick' {
  declare module.exports: any;
}

declare module 'ramda/es/pickAll' {
  declare module.exports: any;
}

declare module 'ramda/es/pickBy' {
  declare module.exports: any;
}

declare module 'ramda/es/pipe' {
  declare module.exports: any;
}

declare module 'ramda/es/pipeK' {
  declare module.exports: any;
}

declare module 'ramda/es/pipeP' {
  declare module.exports: any;
}

declare module 'ramda/es/pipeWith' {
  declare module.exports: any;
}

declare module 'ramda/es/pluck' {
  declare module.exports: any;
}

declare module 'ramda/es/prepend' {
  declare module.exports: any;
}

declare module 'ramda/es/product' {
  declare module.exports: any;
}

declare module 'ramda/es/project' {
  declare module.exports: any;
}

declare module 'ramda/es/prop' {
  declare module.exports: any;
}

declare module 'ramda/es/propEq' {
  declare module.exports: any;
}

declare module 'ramda/es/propIs' {
  declare module.exports: any;
}

declare module 'ramda/es/propOr' {
  declare module.exports: any;
}

declare module 'ramda/es/props' {
  declare module.exports: any;
}

declare module 'ramda/es/propSatisfies' {
  declare module.exports: any;
}

declare module 'ramda/es/range' {
  declare module.exports: any;
}

declare module 'ramda/es/reduce' {
  declare module.exports: any;
}

declare module 'ramda/es/reduceBy' {
  declare module.exports: any;
}

declare module 'ramda/es/reduced' {
  declare module.exports: any;
}

declare module 'ramda/es/reduceRight' {
  declare module.exports: any;
}

declare module 'ramda/es/reduceWhile' {
  declare module.exports: any;
}

declare module 'ramda/es/reject' {
  declare module.exports: any;
}

declare module 'ramda/es/remove' {
  declare module.exports: any;
}

declare module 'ramda/es/repeat' {
  declare module.exports: any;
}

declare module 'ramda/es/replace' {
  declare module.exports: any;
}

declare module 'ramda/es/reverse' {
  declare module.exports: any;
}

declare module 'ramda/es/scan' {
  declare module.exports: any;
}

declare module 'ramda/es/sequence' {
  declare module.exports: any;
}

declare module 'ramda/es/set' {
  declare module.exports: any;
}

declare module 'ramda/es/slice' {
  declare module.exports: any;
}

declare module 'ramda/es/sort' {
  declare module.exports: any;
}

declare module 'ramda/es/sortBy' {
  declare module.exports: any;
}

declare module 'ramda/es/sortWith' {
  declare module.exports: any;
}

declare module 'ramda/es/split' {
  declare module.exports: any;
}

declare module 'ramda/es/splitAt' {
  declare module.exports: any;
}

declare module 'ramda/es/splitEvery' {
  declare module.exports: any;
}

declare module 'ramda/es/splitWhen' {
  declare module.exports: any;
}

declare module 'ramda/es/startsWith' {
  declare module.exports: any;
}

declare module 'ramda/es/subtract' {
  declare module.exports: any;
}

declare module 'ramda/es/sum' {
  declare module.exports: any;
}

declare module 'ramda/es/symmetricDifference' {
  declare module.exports: any;
}

declare module 'ramda/es/symmetricDifferenceWith' {
  declare module.exports: any;
}

declare module 'ramda/es/T' {
  declare module.exports: any;
}

declare module 'ramda/es/tail' {
  declare module.exports: any;
}

declare module 'ramda/es/take' {
  declare module.exports: any;
}

declare module 'ramda/es/takeLast' {
  declare module.exports: any;
}

declare module 'ramda/es/takeLastWhile' {
  declare module.exports: any;
}

declare module 'ramda/es/takeWhile' {
  declare module.exports: any;
}

declare module 'ramda/es/tap' {
  declare module.exports: any;
}

declare module 'ramda/es/test' {
  declare module.exports: any;
}

declare module 'ramda/es/then' {
  declare module.exports: any;
}

declare module 'ramda/es/thunkify' {
  declare module.exports: any;
}

declare module 'ramda/es/times' {
  declare module.exports: any;
}

declare module 'ramda/es/toLower' {
  declare module.exports: any;
}

declare module 'ramda/es/toPairs' {
  declare module.exports: any;
}

declare module 'ramda/es/toPairsIn' {
  declare module.exports: any;
}

declare module 'ramda/es/toString' {
  declare module.exports: any;
}

declare module 'ramda/es/toUpper' {
  declare module.exports: any;
}

declare module 'ramda/es/transduce' {
  declare module.exports: any;
}

declare module 'ramda/es/transpose' {
  declare module.exports: any;
}

declare module 'ramda/es/traverse' {
  declare module.exports: any;
}

declare module 'ramda/es/trim' {
  declare module.exports: any;
}

declare module 'ramda/es/tryCatch' {
  declare module.exports: any;
}

declare module 'ramda/es/type' {
  declare module.exports: any;
}

declare module 'ramda/es/unapply' {
  declare module.exports: any;
}

declare module 'ramda/es/unary' {
  declare module.exports: any;
}

declare module 'ramda/es/uncurryN' {
  declare module.exports: any;
}

declare module 'ramda/es/unfold' {
  declare module.exports: any;
}

declare module 'ramda/es/union' {
  declare module.exports: any;
}

declare module 'ramda/es/unionWith' {
  declare module.exports: any;
}

declare module 'ramda/es/uniq' {
  declare module.exports: any;
}

declare module 'ramda/es/uniqBy' {
  declare module.exports: any;
}

declare module 'ramda/es/uniqWith' {
  declare module.exports: any;
}

declare module 'ramda/es/unless' {
  declare module.exports: any;
}

declare module 'ramda/es/unnest' {
  declare module.exports: any;
}

declare module 'ramda/es/until' {
  declare module.exports: any;
}

declare module 'ramda/es/update' {
  declare module.exports: any;
}

declare module 'ramda/es/useWith' {
  declare module.exports: any;
}

declare module 'ramda/es/values' {
  declare module.exports: any;
}

declare module 'ramda/es/valuesIn' {
  declare module.exports: any;
}

declare module 'ramda/es/view' {
  declare module.exports: any;
}

declare module 'ramda/es/when' {
  declare module.exports: any;
}

declare module 'ramda/es/where' {
  declare module.exports: any;
}

declare module 'ramda/es/whereEq' {
  declare module.exports: any;
}

declare module 'ramda/es/without' {
  declare module.exports: any;
}

declare module 'ramda/es/xprod' {
  declare module.exports: any;
}

declare module 'ramda/es/zip' {
  declare module.exports: any;
}

declare module 'ramda/es/zipObj' {
  declare module.exports: any;
}

declare module 'ramda/es/zipWith' {
  declare module.exports: any;
}

declare module 'ramda/src/__' {
  declare module.exports: any;
}

declare module 'ramda/src/add' {
  declare module.exports: any;
}

declare module 'ramda/src/addIndex' {
  declare module.exports: any;
}

declare module 'ramda/src/adjust' {
  declare module.exports: any;
}

declare module 'ramda/src/all' {
  declare module.exports: any;
}

declare module 'ramda/src/allPass' {
  declare module.exports: any;
}

declare module 'ramda/src/always' {
  declare module.exports: any;
}

declare module 'ramda/src/and' {
  declare module.exports: any;
}

declare module 'ramda/src/any' {
  declare module.exports: any;
}

declare module 'ramda/src/anyPass' {
  declare module.exports: any;
}

declare module 'ramda/src/ap' {
  declare module.exports: any;
}

declare module 'ramda/src/aperture' {
  declare module.exports: any;
}

declare module 'ramda/src/append' {
  declare module.exports: any;
}

declare module 'ramda/src/apply' {
  declare module.exports: any;
}

declare module 'ramda/src/applySpec' {
  declare module.exports: any;
}

declare module 'ramda/src/applyTo' {
  declare module.exports: any;
}

declare module 'ramda/src/ascend' {
  declare module.exports: any;
}

declare module 'ramda/src/assoc' {
  declare module.exports: any;
}

declare module 'ramda/src/assocPath' {
  declare module.exports: any;
}

declare module 'ramda/src/binary' {
  declare module.exports: any;
}

declare module 'ramda/src/bind' {
  declare module.exports: any;
}

declare module 'ramda/src/both' {
  declare module.exports: any;
}

declare module 'ramda/src/call' {
  declare module.exports: any;
}

declare module 'ramda/src/chain' {
  declare module.exports: any;
}

declare module 'ramda/src/clamp' {
  declare module.exports: any;
}

declare module 'ramda/src/clone' {
  declare module.exports: any;
}

declare module 'ramda/src/comparator' {
  declare module.exports: any;
}

declare module 'ramda/src/complement' {
  declare module.exports: any;
}

declare module 'ramda/src/compose' {
  declare module.exports: any;
}

declare module 'ramda/src/composeK' {
  declare module.exports: any;
}

declare module 'ramda/src/composeP' {
  declare module.exports: any;
}

declare module 'ramda/src/composeWith' {
  declare module.exports: any;
}

declare module 'ramda/src/concat' {
  declare module.exports: any;
}

declare module 'ramda/src/cond' {
  declare module.exports: any;
}

declare module 'ramda/src/construct' {
  declare module.exports: any;
}

declare module 'ramda/src/constructN' {
  declare module.exports: any;
}

declare module 'ramda/src/contains' {
  declare module.exports: any;
}

declare module 'ramda/src/converge' {
  declare module.exports: any;
}

declare module 'ramda/src/countBy' {
  declare module.exports: any;
}

declare module 'ramda/src/curry' {
  declare module.exports: any;
}

declare module 'ramda/src/curryN' {
  declare module.exports: any;
}

declare module 'ramda/src/dec' {
  declare module.exports: any;
}

declare module 'ramda/src/defaultTo' {
  declare module.exports: any;
}

declare module 'ramda/src/descend' {
  declare module.exports: any;
}

declare module 'ramda/src/difference' {
  declare module.exports: any;
}

declare module 'ramda/src/differenceWith' {
  declare module.exports: any;
}

declare module 'ramda/src/dissoc' {
  declare module.exports: any;
}

declare module 'ramda/src/dissocPath' {
  declare module.exports: any;
}

declare module 'ramda/src/divide' {
  declare module.exports: any;
}

declare module 'ramda/src/drop' {
  declare module.exports: any;
}

declare module 'ramda/src/dropLast' {
  declare module.exports: any;
}

declare module 'ramda/src/dropLastWhile' {
  declare module.exports: any;
}

declare module 'ramda/src/dropRepeats' {
  declare module.exports: any;
}

declare module 'ramda/src/dropRepeatsWith' {
  declare module.exports: any;
}

declare module 'ramda/src/dropWhile' {
  declare module.exports: any;
}

declare module 'ramda/src/either' {
  declare module.exports: any;
}

declare module 'ramda/src/empty' {
  declare module.exports: any;
}

declare module 'ramda/src/endsWith' {
  declare module.exports: any;
}

declare module 'ramda/src/eqBy' {
  declare module.exports: any;
}

declare module 'ramda/src/eqProps' {
  declare module.exports: any;
}

declare module 'ramda/src/equals' {
  declare module.exports: any;
}

declare module 'ramda/src/evolve' {
  declare module.exports: any;
}

declare module 'ramda/src/F' {
  declare module.exports: any;
}

declare module 'ramda/src/filter' {
  declare module.exports: any;
}

declare module 'ramda/src/find' {
  declare module.exports: any;
}

declare module 'ramda/src/findIndex' {
  declare module.exports: any;
}

declare module 'ramda/src/findLast' {
  declare module.exports: any;
}

declare module 'ramda/src/findLastIndex' {
  declare module.exports: any;
}

declare module 'ramda/src/flatten' {
  declare module.exports: any;
}

declare module 'ramda/src/flip' {
  declare module.exports: any;
}

declare module 'ramda/src/forEach' {
  declare module.exports: any;
}

declare module 'ramda/src/forEachObjIndexed' {
  declare module.exports: any;
}

declare module 'ramda/src/fromPairs' {
  declare module.exports: any;
}

declare module 'ramda/src/groupBy' {
  declare module.exports: any;
}

declare module 'ramda/src/groupWith' {
  declare module.exports: any;
}

declare module 'ramda/src/gt' {
  declare module.exports: any;
}

declare module 'ramda/src/gte' {
  declare module.exports: any;
}

declare module 'ramda/src/has' {
  declare module.exports: any;
}

declare module 'ramda/src/hasIn' {
  declare module.exports: any;
}

declare module 'ramda/src/hasPath' {
  declare module.exports: any;
}

declare module 'ramda/src/head' {
  declare module.exports: any;
}

declare module 'ramda/src/identical' {
  declare module.exports: any;
}

declare module 'ramda/src/identity' {
  declare module.exports: any;
}

declare module 'ramda/src/ifElse' {
  declare module.exports: any;
}

declare module 'ramda/src/inc' {
  declare module.exports: any;
}

declare module 'ramda/src/includes' {
  declare module.exports: any;
}

declare module 'ramda/src/index' {
  declare module.exports: any;
}

declare module 'ramda/src/indexBy' {
  declare module.exports: any;
}

declare module 'ramda/src/indexOf' {
  declare module.exports: any;
}

declare module 'ramda/src/init' {
  declare module.exports: any;
}

declare module 'ramda/src/innerJoin' {
  declare module.exports: any;
}

declare module 'ramda/src/insert' {
  declare module.exports: any;
}

declare module 'ramda/src/insertAll' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_aperture' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_arity' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_arrayFromIterator' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_assertPromise' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_checkForMethod' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_clone' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_cloneRegExp' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_complement' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_concat' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_createPartialApplicator' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_curry1' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_curry2' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_curry3' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_curryN' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_dispatchable' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_dropLast' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_dropLastWhile' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_equals' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_filter' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_flatCat' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_forceReduced' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_functionName' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_functionsWith' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_has' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_identity' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_includes' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_includesWith' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_indexOf' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_isArguments' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_isArray' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_isArrayLike' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_isFunction' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_isInteger' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_isNumber' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_isObject' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_isPlaceholder' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_isRegExp' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_isString' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_isTransformer' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_makeFlat' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_map' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_objectAssign' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_objectIs' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_of' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_pipe' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_pipeP' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_quote' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_reduce' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_reduced' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_Set' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_stepCat' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_toISOString' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_toString' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xall' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xany' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xaperture' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xchain' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xdrop' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xdropLast' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xdropLastWhile' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xdropRepeatsWith' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xdropWhile' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xfBase' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xfilter' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xfind' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xfindIndex' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xfindLast' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xfindLastIndex' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xmap' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xreduceBy' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xtake' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xtakeWhile' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xtap' {
  declare module.exports: any;
}

declare module 'ramda/src/internal/_xwrap' {
  declare module.exports: any;
}

declare module 'ramda/src/intersection' {
  declare module.exports: any;
}

declare module 'ramda/src/intersperse' {
  declare module.exports: any;
}

declare module 'ramda/src/into' {
  declare module.exports: any;
}

declare module 'ramda/src/invert' {
  declare module.exports: any;
}

declare module 'ramda/src/invertObj' {
  declare module.exports: any;
}

declare module 'ramda/src/invoker' {
  declare module.exports: any;
}

declare module 'ramda/src/is' {
  declare module.exports: any;
}

declare module 'ramda/src/isEmpty' {
  declare module.exports: any;
}

declare module 'ramda/src/isNil' {
  declare module.exports: any;
}

declare module 'ramda/src/join' {
  declare module.exports: any;
}

declare module 'ramda/src/juxt' {
  declare module.exports: any;
}

declare module 'ramda/src/keys' {
  declare module.exports: any;
}

declare module 'ramda/src/keysIn' {
  declare module.exports: any;
}

declare module 'ramda/src/last' {
  declare module.exports: any;
}

declare module 'ramda/src/lastIndexOf' {
  declare module.exports: any;
}

declare module 'ramda/src/length' {
  declare module.exports: any;
}

declare module 'ramda/src/lens' {
  declare module.exports: any;
}

declare module 'ramda/src/lensIndex' {
  declare module.exports: any;
}

declare module 'ramda/src/lensPath' {
  declare module.exports: any;
}

declare module 'ramda/src/lensProp' {
  declare module.exports: any;
}

declare module 'ramda/src/lift' {
  declare module.exports: any;
}

declare module 'ramda/src/liftN' {
  declare module.exports: any;
}

declare module 'ramda/src/lt' {
  declare module.exports: any;
}

declare module 'ramda/src/lte' {
  declare module.exports: any;
}

declare module 'ramda/src/map' {
  declare module.exports: any;
}

declare module 'ramda/src/mapAccum' {
  declare module.exports: any;
}

declare module 'ramda/src/mapAccumRight' {
  declare module.exports: any;
}

declare module 'ramda/src/mapObjIndexed' {
  declare module.exports: any;
}

declare module 'ramda/src/match' {
  declare module.exports: any;
}

declare module 'ramda/src/mathMod' {
  declare module.exports: any;
}

declare module 'ramda/src/max' {
  declare module.exports: any;
}

declare module 'ramda/src/maxBy' {
  declare module.exports: any;
}

declare module 'ramda/src/mean' {
  declare module.exports: any;
}

declare module 'ramda/src/median' {
  declare module.exports: any;
}

declare module 'ramda/src/memoizeWith' {
  declare module.exports: any;
}

declare module 'ramda/src/merge' {
  declare module.exports: any;
}

declare module 'ramda/src/mergeAll' {
  declare module.exports: any;
}

declare module 'ramda/src/mergeDeepLeft' {
  declare module.exports: any;
}

declare module 'ramda/src/mergeDeepRight' {
  declare module.exports: any;
}

declare module 'ramda/src/mergeDeepWith' {
  declare module.exports: any;
}

declare module 'ramda/src/mergeDeepWithKey' {
  declare module.exports: any;
}

declare module 'ramda/src/mergeLeft' {
  declare module.exports: any;
}

declare module 'ramda/src/mergeRight' {
  declare module.exports: any;
}

declare module 'ramda/src/mergeWith' {
  declare module.exports: any;
}

declare module 'ramda/src/mergeWithKey' {
  declare module.exports: any;
}

declare module 'ramda/src/min' {
  declare module.exports: any;
}

declare module 'ramda/src/minBy' {
  declare module.exports: any;
}

declare module 'ramda/src/modulo' {
  declare module.exports: any;
}

declare module 'ramda/src/move' {
  declare module.exports: any;
}

declare module 'ramda/src/multiply' {
  declare module.exports: any;
}

declare module 'ramda/src/nAry' {
  declare module.exports: any;
}

declare module 'ramda/src/negate' {
  declare module.exports: any;
}

declare module 'ramda/src/none' {
  declare module.exports: any;
}

declare module 'ramda/src/not' {
  declare module.exports: any;
}

declare module 'ramda/src/nth' {
  declare module.exports: any;
}

declare module 'ramda/src/nthArg' {
  declare module.exports: any;
}

declare module 'ramda/src/o' {
  declare module.exports: any;
}

declare module 'ramda/src/objOf' {
  declare module.exports: any;
}

declare module 'ramda/src/of' {
  declare module.exports: any;
}

declare module 'ramda/src/omit' {
  declare module.exports: any;
}

declare module 'ramda/src/once' {
  declare module.exports: any;
}

declare module 'ramda/src/or' {
  declare module.exports: any;
}

declare module 'ramda/src/otherwise' {
  declare module.exports: any;
}

declare module 'ramda/src/over' {
  declare module.exports: any;
}

declare module 'ramda/src/pair' {
  declare module.exports: any;
}

declare module 'ramda/src/partial' {
  declare module.exports: any;
}

declare module 'ramda/src/partialRight' {
  declare module.exports: any;
}

declare module 'ramda/src/partition' {
  declare module.exports: any;
}

declare module 'ramda/src/path' {
  declare module.exports: any;
}

declare module 'ramda/src/pathEq' {
  declare module.exports: any;
}

declare module 'ramda/src/pathOr' {
  declare module.exports: any;
}

declare module 'ramda/src/pathSatisfies' {
  declare module.exports: any;
}

declare module 'ramda/src/pick' {
  declare module.exports: any;
}

declare module 'ramda/src/pickAll' {
  declare module.exports: any;
}

declare module 'ramda/src/pickBy' {
  declare module.exports: any;
}

declare module 'ramda/src/pipe' {
  declare module.exports: any;
}

declare module 'ramda/src/pipeK' {
  declare module.exports: any;
}

declare module 'ramda/src/pipeP' {
  declare module.exports: any;
}

declare module 'ramda/src/pipeWith' {
  declare module.exports: any;
}

declare module 'ramda/src/pluck' {
  declare module.exports: any;
}

declare module 'ramda/src/prepend' {
  declare module.exports: any;
}

declare module 'ramda/src/product' {
  declare module.exports: any;
}

declare module 'ramda/src/project' {
  declare module.exports: any;
}

declare module 'ramda/src/prop' {
  declare module.exports: any;
}

declare module 'ramda/src/propEq' {
  declare module.exports: any;
}

declare module 'ramda/src/propIs' {
  declare module.exports: any;
}

declare module 'ramda/src/propOr' {
  declare module.exports: any;
}

declare module 'ramda/src/props' {
  declare module.exports: any;
}

declare module 'ramda/src/propSatisfies' {
  declare module.exports: any;
}

declare module 'ramda/src/range' {
  declare module.exports: any;
}

declare module 'ramda/src/reduce' {
  declare module.exports: any;
}

declare module 'ramda/src/reduceBy' {
  declare module.exports: any;
}

declare module 'ramda/src/reduced' {
  declare module.exports: any;
}

declare module 'ramda/src/reduceRight' {
  declare module.exports: any;
}

declare module 'ramda/src/reduceWhile' {
  declare module.exports: any;
}

declare module 'ramda/src/reject' {
  declare module.exports: any;
}

declare module 'ramda/src/remove' {
  declare module.exports: any;
}

declare module 'ramda/src/repeat' {
  declare module.exports: any;
}

declare module 'ramda/src/replace' {
  declare module.exports: any;
}

declare module 'ramda/src/reverse' {
  declare module.exports: any;
}

declare module 'ramda/src/scan' {
  declare module.exports: any;
}

declare module 'ramda/src/sequence' {
  declare module.exports: any;
}

declare module 'ramda/src/set' {
  declare module.exports: any;
}

declare module 'ramda/src/slice' {
  declare module.exports: any;
}

declare module 'ramda/src/sort' {
  declare module.exports: any;
}

declare module 'ramda/src/sortBy' {
  declare module.exports: any;
}

declare module 'ramda/src/sortWith' {
  declare module.exports: any;
}

declare module 'ramda/src/split' {
  declare module.exports: any;
}

declare module 'ramda/src/splitAt' {
  declare module.exports: any;
}

declare module 'ramda/src/splitEvery' {
  declare module.exports: any;
}

declare module 'ramda/src/splitWhen' {
  declare module.exports: any;
}

declare module 'ramda/src/startsWith' {
  declare module.exports: any;
}

declare module 'ramda/src/subtract' {
  declare module.exports: any;
}

declare module 'ramda/src/sum' {
  declare module.exports: any;
}

declare module 'ramda/src/symmetricDifference' {
  declare module.exports: any;
}

declare module 'ramda/src/symmetricDifferenceWith' {
  declare module.exports: any;
}

declare module 'ramda/src/T' {
  declare module.exports: any;
}

declare module 'ramda/src/tail' {
  declare module.exports: any;
}

declare module 'ramda/src/take' {
  declare module.exports: any;
}

declare module 'ramda/src/takeLast' {
  declare module.exports: any;
}

declare module 'ramda/src/takeLastWhile' {
  declare module.exports: any;
}

declare module 'ramda/src/takeWhile' {
  declare module.exports: any;
}

declare module 'ramda/src/tap' {
  declare module.exports: any;
}

declare module 'ramda/src/test' {
  declare module.exports: any;
}

declare module 'ramda/src/then' {
  declare module.exports: any;
}

declare module 'ramda/src/thunkify' {
  declare module.exports: any;
}

declare module 'ramda/src/times' {
  declare module.exports: any;
}

declare module 'ramda/src/toLower' {
  declare module.exports: any;
}

declare module 'ramda/src/toPairs' {
  declare module.exports: any;
}

declare module 'ramda/src/toPairsIn' {
  declare module.exports: any;
}

declare module 'ramda/src/toString' {
  declare module.exports: any;
}

declare module 'ramda/src/toUpper' {
  declare module.exports: any;
}

declare module 'ramda/src/transduce' {
  declare module.exports: any;
}

declare module 'ramda/src/transpose' {
  declare module.exports: any;
}

declare module 'ramda/src/traverse' {
  declare module.exports: any;
}

declare module 'ramda/src/trim' {
  declare module.exports: any;
}

declare module 'ramda/src/tryCatch' {
  declare module.exports: any;
}

declare module 'ramda/src/type' {
  declare module.exports: any;
}

declare module 'ramda/src/unapply' {
  declare module.exports: any;
}

declare module 'ramda/src/unary' {
  declare module.exports: any;
}

declare module 'ramda/src/uncurryN' {
  declare module.exports: any;
}

declare module 'ramda/src/unfold' {
  declare module.exports: any;
}

declare module 'ramda/src/union' {
  declare module.exports: any;
}

declare module 'ramda/src/unionWith' {
  declare module.exports: any;
}

declare module 'ramda/src/uniq' {
  declare module.exports: any;
}

declare module 'ramda/src/uniqBy' {
  declare module.exports: any;
}

declare module 'ramda/src/uniqWith' {
  declare module.exports: any;
}

declare module 'ramda/src/unless' {
  declare module.exports: any;
}

declare module 'ramda/src/unnest' {
  declare module.exports: any;
}

declare module 'ramda/src/until' {
  declare module.exports: any;
}

declare module 'ramda/src/update' {
  declare module.exports: any;
}

declare module 'ramda/src/useWith' {
  declare module.exports: any;
}

declare module 'ramda/src/values' {
  declare module.exports: any;
}

declare module 'ramda/src/valuesIn' {
  declare module.exports: any;
}

declare module 'ramda/src/view' {
  declare module.exports: any;
}

declare module 'ramda/src/when' {
  declare module.exports: any;
}

declare module 'ramda/src/where' {
  declare module.exports: any;
}

declare module 'ramda/src/whereEq' {
  declare module.exports: any;
}

declare module 'ramda/src/without' {
  declare module.exports: any;
}

declare module 'ramda/src/xprod' {
  declare module.exports: any;
}

declare module 'ramda/src/zip' {
  declare module.exports: any;
}

declare module 'ramda/src/zipObj' {
  declare module.exports: any;
}

declare module 'ramda/src/zipWith' {
  declare module.exports: any;
}

// Filename aliases
declare module 'ramda/dist/ramda.js' {
  declare module.exports: $Exports<'ramda/dist/ramda'>;
}
declare module 'ramda/dist/ramda.min.js' {
  declare module.exports: $Exports<'ramda/dist/ramda.min'>;
}
declare module 'ramda/es/__.js' {
  declare module.exports: $Exports<'ramda/es/__'>;
}
declare module 'ramda/es/add.js' {
  declare module.exports: $Exports<'ramda/es/add'>;
}
declare module 'ramda/es/addIndex.js' {
  declare module.exports: $Exports<'ramda/es/addIndex'>;
}
declare module 'ramda/es/adjust.js' {
  declare module.exports: $Exports<'ramda/es/adjust'>;
}
declare module 'ramda/es/all.js' {
  declare module.exports: $Exports<'ramda/es/all'>;
}
declare module 'ramda/es/allPass.js' {
  declare module.exports: $Exports<'ramda/es/allPass'>;
}
declare module 'ramda/es/always.js' {
  declare module.exports: $Exports<'ramda/es/always'>;
}
declare module 'ramda/es/and.js' {
  declare module.exports: $Exports<'ramda/es/and'>;
}
declare module 'ramda/es/any.js' {
  declare module.exports: $Exports<'ramda/es/any'>;
}
declare module 'ramda/es/anyPass.js' {
  declare module.exports: $Exports<'ramda/es/anyPass'>;
}
declare module 'ramda/es/ap.js' {
  declare module.exports: $Exports<'ramda/es/ap'>;
}
declare module 'ramda/es/aperture.js' {
  declare module.exports: $Exports<'ramda/es/aperture'>;
}
declare module 'ramda/es/append.js' {
  declare module.exports: $Exports<'ramda/es/append'>;
}
declare module 'ramda/es/apply.js' {
  declare module.exports: $Exports<'ramda/es/apply'>;
}
declare module 'ramda/es/applySpec.js' {
  declare module.exports: $Exports<'ramda/es/applySpec'>;
}
declare module 'ramda/es/applyTo.js' {
  declare module.exports: $Exports<'ramda/es/applyTo'>;
}
declare module 'ramda/es/ascend.js' {
  declare module.exports: $Exports<'ramda/es/ascend'>;
}
declare module 'ramda/es/assoc.js' {
  declare module.exports: $Exports<'ramda/es/assoc'>;
}
declare module 'ramda/es/assocPath.js' {
  declare module.exports: $Exports<'ramda/es/assocPath'>;
}
declare module 'ramda/es/binary.js' {
  declare module.exports: $Exports<'ramda/es/binary'>;
}
declare module 'ramda/es/bind.js' {
  declare module.exports: $Exports<'ramda/es/bind'>;
}
declare module 'ramda/es/both.js' {
  declare module.exports: $Exports<'ramda/es/both'>;
}
declare module 'ramda/es/call.js' {
  declare module.exports: $Exports<'ramda/es/call'>;
}
declare module 'ramda/es/chain.js' {
  declare module.exports: $Exports<'ramda/es/chain'>;
}
declare module 'ramda/es/clamp.js' {
  declare module.exports: $Exports<'ramda/es/clamp'>;
}
declare module 'ramda/es/clone.js' {
  declare module.exports: $Exports<'ramda/es/clone'>;
}
declare module 'ramda/es/comparator.js' {
  declare module.exports: $Exports<'ramda/es/comparator'>;
}
declare module 'ramda/es/complement.js' {
  declare module.exports: $Exports<'ramda/es/complement'>;
}
declare module 'ramda/es/compose.js' {
  declare module.exports: $Exports<'ramda/es/compose'>;
}
declare module 'ramda/es/composeK.js' {
  declare module.exports: $Exports<'ramda/es/composeK'>;
}
declare module 'ramda/es/composeP.js' {
  declare module.exports: $Exports<'ramda/es/composeP'>;
}
declare module 'ramda/es/composeWith.js' {
  declare module.exports: $Exports<'ramda/es/composeWith'>;
}
declare module 'ramda/es/concat.js' {
  declare module.exports: $Exports<'ramda/es/concat'>;
}
declare module 'ramda/es/cond.js' {
  declare module.exports: $Exports<'ramda/es/cond'>;
}
declare module 'ramda/es/construct.js' {
  declare module.exports: $Exports<'ramda/es/construct'>;
}
declare module 'ramda/es/constructN.js' {
  declare module.exports: $Exports<'ramda/es/constructN'>;
}
declare module 'ramda/es/contains.js' {
  declare module.exports: $Exports<'ramda/es/contains'>;
}
declare module 'ramda/es/converge.js' {
  declare module.exports: $Exports<'ramda/es/converge'>;
}
declare module 'ramda/es/countBy.js' {
  declare module.exports: $Exports<'ramda/es/countBy'>;
}
declare module 'ramda/es/curry.js' {
  declare module.exports: $Exports<'ramda/es/curry'>;
}
declare module 'ramda/es/curryN.js' {
  declare module.exports: $Exports<'ramda/es/curryN'>;
}
declare module 'ramda/es/dec.js' {
  declare module.exports: $Exports<'ramda/es/dec'>;
}
declare module 'ramda/es/defaultTo.js' {
  declare module.exports: $Exports<'ramda/es/defaultTo'>;
}
declare module 'ramda/es/descend.js' {
  declare module.exports: $Exports<'ramda/es/descend'>;
}
declare module 'ramda/es/difference.js' {
  declare module.exports: $Exports<'ramda/es/difference'>;
}
declare module 'ramda/es/differenceWith.js' {
  declare module.exports: $Exports<'ramda/es/differenceWith'>;
}
declare module 'ramda/es/dissoc.js' {
  declare module.exports: $Exports<'ramda/es/dissoc'>;
}
declare module 'ramda/es/dissocPath.js' {
  declare module.exports: $Exports<'ramda/es/dissocPath'>;
}
declare module 'ramda/es/divide.js' {
  declare module.exports: $Exports<'ramda/es/divide'>;
}
declare module 'ramda/es/drop.js' {
  declare module.exports: $Exports<'ramda/es/drop'>;
}
declare module 'ramda/es/dropLast.js' {
  declare module.exports: $Exports<'ramda/es/dropLast'>;
}
declare module 'ramda/es/dropLastWhile.js' {
  declare module.exports: $Exports<'ramda/es/dropLastWhile'>;
}
declare module 'ramda/es/dropRepeats.js' {
  declare module.exports: $Exports<'ramda/es/dropRepeats'>;
}
declare module 'ramda/es/dropRepeatsWith.js' {
  declare module.exports: $Exports<'ramda/es/dropRepeatsWith'>;
}
declare module 'ramda/es/dropWhile.js' {
  declare module.exports: $Exports<'ramda/es/dropWhile'>;
}
declare module 'ramda/es/either.js' {
  declare module.exports: $Exports<'ramda/es/either'>;
}
declare module 'ramda/es/empty.js' {
  declare module.exports: $Exports<'ramda/es/empty'>;
}
declare module 'ramda/es/endsWith.js' {
  declare module.exports: $Exports<'ramda/es/endsWith'>;
}
declare module 'ramda/es/eqBy.js' {
  declare module.exports: $Exports<'ramda/es/eqBy'>;
}
declare module 'ramda/es/eqProps.js' {
  declare module.exports: $Exports<'ramda/es/eqProps'>;
}
declare module 'ramda/es/equals.js' {
  declare module.exports: $Exports<'ramda/es/equals'>;
}
declare module 'ramda/es/evolve.js' {
  declare module.exports: $Exports<'ramda/es/evolve'>;
}
declare module 'ramda/es/F.js' {
  declare module.exports: $Exports<'ramda/es/F'>;
}
declare module 'ramda/es/filter.js' {
  declare module.exports: $Exports<'ramda/es/filter'>;
}
declare module 'ramda/es/find.js' {
  declare module.exports: $Exports<'ramda/es/find'>;
}
declare module 'ramda/es/findIndex.js' {
  declare module.exports: $Exports<'ramda/es/findIndex'>;
}
declare module 'ramda/es/findLast.js' {
  declare module.exports: $Exports<'ramda/es/findLast'>;
}
declare module 'ramda/es/findLastIndex.js' {
  declare module.exports: $Exports<'ramda/es/findLastIndex'>;
}
declare module 'ramda/es/flatten.js' {
  declare module.exports: $Exports<'ramda/es/flatten'>;
}
declare module 'ramda/es/flip.js' {
  declare module.exports: $Exports<'ramda/es/flip'>;
}
declare module 'ramda/es/forEach.js' {
  declare module.exports: $Exports<'ramda/es/forEach'>;
}
declare module 'ramda/es/forEachObjIndexed.js' {
  declare module.exports: $Exports<'ramda/es/forEachObjIndexed'>;
}
declare module 'ramda/es/fromPairs.js' {
  declare module.exports: $Exports<'ramda/es/fromPairs'>;
}
declare module 'ramda/es/groupBy.js' {
  declare module.exports: $Exports<'ramda/es/groupBy'>;
}
declare module 'ramda/es/groupWith.js' {
  declare module.exports: $Exports<'ramda/es/groupWith'>;
}
declare module 'ramda/es/gt.js' {
  declare module.exports: $Exports<'ramda/es/gt'>;
}
declare module 'ramda/es/gte.js' {
  declare module.exports: $Exports<'ramda/es/gte'>;
}
declare module 'ramda/es/has.js' {
  declare module.exports: $Exports<'ramda/es/has'>;
}
declare module 'ramda/es/hasIn.js' {
  declare module.exports: $Exports<'ramda/es/hasIn'>;
}
declare module 'ramda/es/hasPath.js' {
  declare module.exports: $Exports<'ramda/es/hasPath'>;
}
declare module 'ramda/es/head.js' {
  declare module.exports: $Exports<'ramda/es/head'>;
}
declare module 'ramda/es/identical.js' {
  declare module.exports: $Exports<'ramda/es/identical'>;
}
declare module 'ramda/es/identity.js' {
  declare module.exports: $Exports<'ramda/es/identity'>;
}
declare module 'ramda/es/ifElse.js' {
  declare module.exports: $Exports<'ramda/es/ifElse'>;
}
declare module 'ramda/es/inc.js' {
  declare module.exports: $Exports<'ramda/es/inc'>;
}
declare module 'ramda/es/includes.js' {
  declare module.exports: $Exports<'ramda/es/includes'>;
}
declare module 'ramda/es/index.js' {
  declare module.exports: $Exports<'ramda/es/index'>;
}
declare module 'ramda/es/indexBy.js' {
  declare module.exports: $Exports<'ramda/es/indexBy'>;
}
declare module 'ramda/es/indexOf.js' {
  declare module.exports: $Exports<'ramda/es/indexOf'>;
}
declare module 'ramda/es/init.js' {
  declare module.exports: $Exports<'ramda/es/init'>;
}
declare module 'ramda/es/innerJoin.js' {
  declare module.exports: $Exports<'ramda/es/innerJoin'>;
}
declare module 'ramda/es/insert.js' {
  declare module.exports: $Exports<'ramda/es/insert'>;
}
declare module 'ramda/es/insertAll.js' {
  declare module.exports: $Exports<'ramda/es/insertAll'>;
}
declare module 'ramda/es/internal/_aperture.js' {
  declare module.exports: $Exports<'ramda/es/internal/_aperture'>;
}
declare module 'ramda/es/internal/_arity.js' {
  declare module.exports: $Exports<'ramda/es/internal/_arity'>;
}
declare module 'ramda/es/internal/_arrayFromIterator.js' {
  declare module.exports: $Exports<'ramda/es/internal/_arrayFromIterator'>;
}
declare module 'ramda/es/internal/_assertPromise.js' {
  declare module.exports: $Exports<'ramda/es/internal/_assertPromise'>;
}
declare module 'ramda/es/internal/_checkForMethod.js' {
  declare module.exports: $Exports<'ramda/es/internal/_checkForMethod'>;
}
declare module 'ramda/es/internal/_clone.js' {
  declare module.exports: $Exports<'ramda/es/internal/_clone'>;
}
declare module 'ramda/es/internal/_cloneRegExp.js' {
  declare module.exports: $Exports<'ramda/es/internal/_cloneRegExp'>;
}
declare module 'ramda/es/internal/_complement.js' {
  declare module.exports: $Exports<'ramda/es/internal/_complement'>;
}
declare module 'ramda/es/internal/_concat.js' {
  declare module.exports: $Exports<'ramda/es/internal/_concat'>;
}
declare module 'ramda/es/internal/_createPartialApplicator.js' {
  declare module.exports: $Exports<'ramda/es/internal/_createPartialApplicator'>;
}
declare module 'ramda/es/internal/_curry1.js' {
  declare module.exports: $Exports<'ramda/es/internal/_curry1'>;
}
declare module 'ramda/es/internal/_curry2.js' {
  declare module.exports: $Exports<'ramda/es/internal/_curry2'>;
}
declare module 'ramda/es/internal/_curry3.js' {
  declare module.exports: $Exports<'ramda/es/internal/_curry3'>;
}
declare module 'ramda/es/internal/_curryN.js' {
  declare module.exports: $Exports<'ramda/es/internal/_curryN'>;
}
declare module 'ramda/es/internal/_dispatchable.js' {
  declare module.exports: $Exports<'ramda/es/internal/_dispatchable'>;
}
declare module 'ramda/es/internal/_dropLast.js' {
  declare module.exports: $Exports<'ramda/es/internal/_dropLast'>;
}
declare module 'ramda/es/internal/_dropLastWhile.js' {
  declare module.exports: $Exports<'ramda/es/internal/_dropLastWhile'>;
}
declare module 'ramda/es/internal/_equals.js' {
  declare module.exports: $Exports<'ramda/es/internal/_equals'>;
}
declare module 'ramda/es/internal/_filter.js' {
  declare module.exports: $Exports<'ramda/es/internal/_filter'>;
}
declare module 'ramda/es/internal/_flatCat.js' {
  declare module.exports: $Exports<'ramda/es/internal/_flatCat'>;
}
declare module 'ramda/es/internal/_forceReduced.js' {
  declare module.exports: $Exports<'ramda/es/internal/_forceReduced'>;
}
declare module 'ramda/es/internal/_functionName.js' {
  declare module.exports: $Exports<'ramda/es/internal/_functionName'>;
}
declare module 'ramda/es/internal/_functionsWith.js' {
  declare module.exports: $Exports<'ramda/es/internal/_functionsWith'>;
}
declare module 'ramda/es/internal/_has.js' {
  declare module.exports: $Exports<'ramda/es/internal/_has'>;
}
declare module 'ramda/es/internal/_identity.js' {
  declare module.exports: $Exports<'ramda/es/internal/_identity'>;
}
declare module 'ramda/es/internal/_includes.js' {
  declare module.exports: $Exports<'ramda/es/internal/_includes'>;
}
declare module 'ramda/es/internal/_includesWith.js' {
  declare module.exports: $Exports<'ramda/es/internal/_includesWith'>;
}
declare module 'ramda/es/internal/_indexOf.js' {
  declare module.exports: $Exports<'ramda/es/internal/_indexOf'>;
}
declare module 'ramda/es/internal/_isArguments.js' {
  declare module.exports: $Exports<'ramda/es/internal/_isArguments'>;
}
declare module 'ramda/es/internal/_isArray.js' {
  declare module.exports: $Exports<'ramda/es/internal/_isArray'>;
}
declare module 'ramda/es/internal/_isArrayLike.js' {
  declare module.exports: $Exports<'ramda/es/internal/_isArrayLike'>;
}
declare module 'ramda/es/internal/_isFunction.js' {
  declare module.exports: $Exports<'ramda/es/internal/_isFunction'>;
}
declare module 'ramda/es/internal/_isInteger.js' {
  declare module.exports: $Exports<'ramda/es/internal/_isInteger'>;
}
declare module 'ramda/es/internal/_isNumber.js' {
  declare module.exports: $Exports<'ramda/es/internal/_isNumber'>;
}
declare module 'ramda/es/internal/_isObject.js' {
  declare module.exports: $Exports<'ramda/es/internal/_isObject'>;
}
declare module 'ramda/es/internal/_isPlaceholder.js' {
  declare module.exports: $Exports<'ramda/es/internal/_isPlaceholder'>;
}
declare module 'ramda/es/internal/_isRegExp.js' {
  declare module.exports: $Exports<'ramda/es/internal/_isRegExp'>;
}
declare module 'ramda/es/internal/_isString.js' {
  declare module.exports: $Exports<'ramda/es/internal/_isString'>;
}
declare module 'ramda/es/internal/_isTransformer.js' {
  declare module.exports: $Exports<'ramda/es/internal/_isTransformer'>;
}
declare module 'ramda/es/internal/_makeFlat.js' {
  declare module.exports: $Exports<'ramda/es/internal/_makeFlat'>;
}
declare module 'ramda/es/internal/_map.js' {
  declare module.exports: $Exports<'ramda/es/internal/_map'>;
}
declare module 'ramda/es/internal/_objectAssign.js' {
  declare module.exports: $Exports<'ramda/es/internal/_objectAssign'>;
}
declare module 'ramda/es/internal/_objectIs.js' {
  declare module.exports: $Exports<'ramda/es/internal/_objectIs'>;
}
declare module 'ramda/es/internal/_of.js' {
  declare module.exports: $Exports<'ramda/es/internal/_of'>;
}
declare module 'ramda/es/internal/_pipe.js' {
  declare module.exports: $Exports<'ramda/es/internal/_pipe'>;
}
declare module 'ramda/es/internal/_pipeP.js' {
  declare module.exports: $Exports<'ramda/es/internal/_pipeP'>;
}
declare module 'ramda/es/internal/_quote.js' {
  declare module.exports: $Exports<'ramda/es/internal/_quote'>;
}
declare module 'ramda/es/internal/_reduce.js' {
  declare module.exports: $Exports<'ramda/es/internal/_reduce'>;
}
declare module 'ramda/es/internal/_reduced.js' {
  declare module.exports: $Exports<'ramda/es/internal/_reduced'>;
}
declare module 'ramda/es/internal/_Set.js' {
  declare module.exports: $Exports<'ramda/es/internal/_Set'>;
}
declare module 'ramda/es/internal/_stepCat.js' {
  declare module.exports: $Exports<'ramda/es/internal/_stepCat'>;
}
declare module 'ramda/es/internal/_toISOString.js' {
  declare module.exports: $Exports<'ramda/es/internal/_toISOString'>;
}
declare module 'ramda/es/internal/_toString.js' {
  declare module.exports: $Exports<'ramda/es/internal/_toString'>;
}
declare module 'ramda/es/internal/_xall.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xall'>;
}
declare module 'ramda/es/internal/_xany.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xany'>;
}
declare module 'ramda/es/internal/_xaperture.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xaperture'>;
}
declare module 'ramda/es/internal/_xchain.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xchain'>;
}
declare module 'ramda/es/internal/_xdrop.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xdrop'>;
}
declare module 'ramda/es/internal/_xdropLast.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xdropLast'>;
}
declare module 'ramda/es/internal/_xdropLastWhile.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xdropLastWhile'>;
}
declare module 'ramda/es/internal/_xdropRepeatsWith.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xdropRepeatsWith'>;
}
declare module 'ramda/es/internal/_xdropWhile.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xdropWhile'>;
}
declare module 'ramda/es/internal/_xfBase.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xfBase'>;
}
declare module 'ramda/es/internal/_xfilter.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xfilter'>;
}
declare module 'ramda/es/internal/_xfind.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xfind'>;
}
declare module 'ramda/es/internal/_xfindIndex.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xfindIndex'>;
}
declare module 'ramda/es/internal/_xfindLast.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xfindLast'>;
}
declare module 'ramda/es/internal/_xfindLastIndex.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xfindLastIndex'>;
}
declare module 'ramda/es/internal/_xmap.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xmap'>;
}
declare module 'ramda/es/internal/_xreduceBy.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xreduceBy'>;
}
declare module 'ramda/es/internal/_xtake.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xtake'>;
}
declare module 'ramda/es/internal/_xtakeWhile.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xtakeWhile'>;
}
declare module 'ramda/es/internal/_xtap.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xtap'>;
}
declare module 'ramda/es/internal/_xwrap.js' {
  declare module.exports: $Exports<'ramda/es/internal/_xwrap'>;
}
declare module 'ramda/es/intersection.js' {
  declare module.exports: $Exports<'ramda/es/intersection'>;
}
declare module 'ramda/es/intersperse.js' {
  declare module.exports: $Exports<'ramda/es/intersperse'>;
}
declare module 'ramda/es/into.js' {
  declare module.exports: $Exports<'ramda/es/into'>;
}
declare module 'ramda/es/invert.js' {
  declare module.exports: $Exports<'ramda/es/invert'>;
}
declare module 'ramda/es/invertObj.js' {
  declare module.exports: $Exports<'ramda/es/invertObj'>;
}
declare module 'ramda/es/invoker.js' {
  declare module.exports: $Exports<'ramda/es/invoker'>;
}
declare module 'ramda/es/is.js' {
  declare module.exports: $Exports<'ramda/es/is'>;
}
declare module 'ramda/es/isEmpty.js' {
  declare module.exports: $Exports<'ramda/es/isEmpty'>;
}
declare module 'ramda/es/isNil.js' {
  declare module.exports: $Exports<'ramda/es/isNil'>;
}
declare module 'ramda/es/join.js' {
  declare module.exports: $Exports<'ramda/es/join'>;
}
declare module 'ramda/es/juxt.js' {
  declare module.exports: $Exports<'ramda/es/juxt'>;
}
declare module 'ramda/es/keys.js' {
  declare module.exports: $Exports<'ramda/es/keys'>;
}
declare module 'ramda/es/keysIn.js' {
  declare module.exports: $Exports<'ramda/es/keysIn'>;
}
declare module 'ramda/es/last.js' {
  declare module.exports: $Exports<'ramda/es/last'>;
}
declare module 'ramda/es/lastIndexOf.js' {
  declare module.exports: $Exports<'ramda/es/lastIndexOf'>;
}
declare module 'ramda/es/length.js' {
  declare module.exports: $Exports<'ramda/es/length'>;
}
declare module 'ramda/es/lens.js' {
  declare module.exports: $Exports<'ramda/es/lens'>;
}
declare module 'ramda/es/lensIndex.js' {
  declare module.exports: $Exports<'ramda/es/lensIndex'>;
}
declare module 'ramda/es/lensPath.js' {
  declare module.exports: $Exports<'ramda/es/lensPath'>;
}
declare module 'ramda/es/lensProp.js' {
  declare module.exports: $Exports<'ramda/es/lensProp'>;
}
declare module 'ramda/es/lift.js' {
  declare module.exports: $Exports<'ramda/es/lift'>;
}
declare module 'ramda/es/liftN.js' {
  declare module.exports: $Exports<'ramda/es/liftN'>;
}
declare module 'ramda/es/lt.js' {
  declare module.exports: $Exports<'ramda/es/lt'>;
}
declare module 'ramda/es/lte.js' {
  declare module.exports: $Exports<'ramda/es/lte'>;
}
declare module 'ramda/es/map.js' {
  declare module.exports: $Exports<'ramda/es/map'>;
}
declare module 'ramda/es/mapAccum.js' {
  declare module.exports: $Exports<'ramda/es/mapAccum'>;
}
declare module 'ramda/es/mapAccumRight.js' {
  declare module.exports: $Exports<'ramda/es/mapAccumRight'>;
}
declare module 'ramda/es/mapObjIndexed.js' {
  declare module.exports: $Exports<'ramda/es/mapObjIndexed'>;
}
declare module 'ramda/es/match.js' {
  declare module.exports: $Exports<'ramda/es/match'>;
}
declare module 'ramda/es/mathMod.js' {
  declare module.exports: $Exports<'ramda/es/mathMod'>;
}
declare module 'ramda/es/max.js' {
  declare module.exports: $Exports<'ramda/es/max'>;
}
declare module 'ramda/es/maxBy.js' {
  declare module.exports: $Exports<'ramda/es/maxBy'>;
}
declare module 'ramda/es/mean.js' {
  declare module.exports: $Exports<'ramda/es/mean'>;
}
declare module 'ramda/es/median.js' {
  declare module.exports: $Exports<'ramda/es/median'>;
}
declare module 'ramda/es/memoizeWith.js' {
  declare module.exports: $Exports<'ramda/es/memoizeWith'>;
}
declare module 'ramda/es/merge.js' {
  declare module.exports: $Exports<'ramda/es/merge'>;
}
declare module 'ramda/es/mergeAll.js' {
  declare module.exports: $Exports<'ramda/es/mergeAll'>;
}
declare module 'ramda/es/mergeDeepLeft.js' {
  declare module.exports: $Exports<'ramda/es/mergeDeepLeft'>;
}
declare module 'ramda/es/mergeDeepRight.js' {
  declare module.exports: $Exports<'ramda/es/mergeDeepRight'>;
}
declare module 'ramda/es/mergeDeepWith.js' {
  declare module.exports: $Exports<'ramda/es/mergeDeepWith'>;
}
declare module 'ramda/es/mergeDeepWithKey.js' {
  declare module.exports: $Exports<'ramda/es/mergeDeepWithKey'>;
}
declare module 'ramda/es/mergeLeft.js' {
  declare module.exports: $Exports<'ramda/es/mergeLeft'>;
}
declare module 'ramda/es/mergeRight.js' {
  declare module.exports: $Exports<'ramda/es/mergeRight'>;
}
declare module 'ramda/es/mergeWith.js' {
  declare module.exports: $Exports<'ramda/es/mergeWith'>;
}
declare module 'ramda/es/mergeWithKey.js' {
  declare module.exports: $Exports<'ramda/es/mergeWithKey'>;
}
declare module 'ramda/es/min.js' {
  declare module.exports: $Exports<'ramda/es/min'>;
}
declare module 'ramda/es/minBy.js' {
  declare module.exports: $Exports<'ramda/es/minBy'>;
}
declare module 'ramda/es/modulo.js' {
  declare module.exports: $Exports<'ramda/es/modulo'>;
}
declare module 'ramda/es/move.js' {
  declare module.exports: $Exports<'ramda/es/move'>;
}
declare module 'ramda/es/multiply.js' {
  declare module.exports: $Exports<'ramda/es/multiply'>;
}
declare module 'ramda/es/nAry.js' {
  declare module.exports: $Exports<'ramda/es/nAry'>;
}
declare module 'ramda/es/negate.js' {
  declare module.exports: $Exports<'ramda/es/negate'>;
}
declare module 'ramda/es/none.js' {
  declare module.exports: $Exports<'ramda/es/none'>;
}
declare module 'ramda/es/not.js' {
  declare module.exports: $Exports<'ramda/es/not'>;
}
declare module 'ramda/es/nth.js' {
  declare module.exports: $Exports<'ramda/es/nth'>;
}
declare module 'ramda/es/nthArg.js' {
  declare module.exports: $Exports<'ramda/es/nthArg'>;
}
declare module 'ramda/es/o.js' {
  declare module.exports: $Exports<'ramda/es/o'>;
}
declare module 'ramda/es/objOf.js' {
  declare module.exports: $Exports<'ramda/es/objOf'>;
}
declare module 'ramda/es/of.js' {
  declare module.exports: $Exports<'ramda/es/of'>;
}
declare module 'ramda/es/omit.js' {
  declare module.exports: $Exports<'ramda/es/omit'>;
}
declare module 'ramda/es/once.js' {
  declare module.exports: $Exports<'ramda/es/once'>;
}
declare module 'ramda/es/or.js' {
  declare module.exports: $Exports<'ramda/es/or'>;
}
declare module 'ramda/es/otherwise.js' {
  declare module.exports: $Exports<'ramda/es/otherwise'>;
}
declare module 'ramda/es/over.js' {
  declare module.exports: $Exports<'ramda/es/over'>;
}
declare module 'ramda/es/pair.js' {
  declare module.exports: $Exports<'ramda/es/pair'>;
}
declare module 'ramda/es/partial.js' {
  declare module.exports: $Exports<'ramda/es/partial'>;
}
declare module 'ramda/es/partialRight.js' {
  declare module.exports: $Exports<'ramda/es/partialRight'>;
}
declare module 'ramda/es/partition.js' {
  declare module.exports: $Exports<'ramda/es/partition'>;
}
declare module 'ramda/es/path.js' {
  declare module.exports: $Exports<'ramda/es/path'>;
}
declare module 'ramda/es/pathEq.js' {
  declare module.exports: $Exports<'ramda/es/pathEq'>;
}
declare module 'ramda/es/pathOr.js' {
  declare module.exports: $Exports<'ramda/es/pathOr'>;
}
declare module 'ramda/es/pathSatisfies.js' {
  declare module.exports: $Exports<'ramda/es/pathSatisfies'>;
}
declare module 'ramda/es/pick.js' {
  declare module.exports: $Exports<'ramda/es/pick'>;
}
declare module 'ramda/es/pickAll.js' {
  declare module.exports: $Exports<'ramda/es/pickAll'>;
}
declare module 'ramda/es/pickBy.js' {
  declare module.exports: $Exports<'ramda/es/pickBy'>;
}
declare module 'ramda/es/pipe.js' {
  declare module.exports: $Exports<'ramda/es/pipe'>;
}
declare module 'ramda/es/pipeK.js' {
  declare module.exports: $Exports<'ramda/es/pipeK'>;
}
declare module 'ramda/es/pipeP.js' {
  declare module.exports: $Exports<'ramda/es/pipeP'>;
}
declare module 'ramda/es/pipeWith.js' {
  declare module.exports: $Exports<'ramda/es/pipeWith'>;
}
declare module 'ramda/es/pluck.js' {
  declare module.exports: $Exports<'ramda/es/pluck'>;
}
declare module 'ramda/es/prepend.js' {
  declare module.exports: $Exports<'ramda/es/prepend'>;
}
declare module 'ramda/es/product.js' {
  declare module.exports: $Exports<'ramda/es/product'>;
}
declare module 'ramda/es/project.js' {
  declare module.exports: $Exports<'ramda/es/project'>;
}
declare module 'ramda/es/prop.js' {
  declare module.exports: $Exports<'ramda/es/prop'>;
}
declare module 'ramda/es/propEq.js' {
  declare module.exports: $Exports<'ramda/es/propEq'>;
}
declare module 'ramda/es/propIs.js' {
  declare module.exports: $Exports<'ramda/es/propIs'>;
}
declare module 'ramda/es/propOr.js' {
  declare module.exports: $Exports<'ramda/es/propOr'>;
}
declare module 'ramda/es/props.js' {
  declare module.exports: $Exports<'ramda/es/props'>;
}
declare module 'ramda/es/propSatisfies.js' {
  declare module.exports: $Exports<'ramda/es/propSatisfies'>;
}
declare module 'ramda/es/range.js' {
  declare module.exports: $Exports<'ramda/es/range'>;
}
declare module 'ramda/es/reduce.js' {
  declare module.exports: $Exports<'ramda/es/reduce'>;
}
declare module 'ramda/es/reduceBy.js' {
  declare module.exports: $Exports<'ramda/es/reduceBy'>;
}
declare module 'ramda/es/reduced.js' {
  declare module.exports: $Exports<'ramda/es/reduced'>;
}
declare module 'ramda/es/reduceRight.js' {
  declare module.exports: $Exports<'ramda/es/reduceRight'>;
}
declare module 'ramda/es/reduceWhile.js' {
  declare module.exports: $Exports<'ramda/es/reduceWhile'>;
}
declare module 'ramda/es/reject.js' {
  declare module.exports: $Exports<'ramda/es/reject'>;
}
declare module 'ramda/es/remove.js' {
  declare module.exports: $Exports<'ramda/es/remove'>;
}
declare module 'ramda/es/repeat.js' {
  declare module.exports: $Exports<'ramda/es/repeat'>;
}
declare module 'ramda/es/replace.js' {
  declare module.exports: $Exports<'ramda/es/replace'>;
}
declare module 'ramda/es/reverse.js' {
  declare module.exports: $Exports<'ramda/es/reverse'>;
}
declare module 'ramda/es/scan.js' {
  declare module.exports: $Exports<'ramda/es/scan'>;
}
declare module 'ramda/es/sequence.js' {
  declare module.exports: $Exports<'ramda/es/sequence'>;
}
declare module 'ramda/es/set.js' {
  declare module.exports: $Exports<'ramda/es/set'>;
}
declare module 'ramda/es/slice.js' {
  declare module.exports: $Exports<'ramda/es/slice'>;
}
declare module 'ramda/es/sort.js' {
  declare module.exports: $Exports<'ramda/es/sort'>;
}
declare module 'ramda/es/sortBy.js' {
  declare module.exports: $Exports<'ramda/es/sortBy'>;
}
declare module 'ramda/es/sortWith.js' {
  declare module.exports: $Exports<'ramda/es/sortWith'>;
}
declare module 'ramda/es/split.js' {
  declare module.exports: $Exports<'ramda/es/split'>;
}
declare module 'ramda/es/splitAt.js' {
  declare module.exports: $Exports<'ramda/es/splitAt'>;
}
declare module 'ramda/es/splitEvery.js' {
  declare module.exports: $Exports<'ramda/es/splitEvery'>;
}
declare module 'ramda/es/splitWhen.js' {
  declare module.exports: $Exports<'ramda/es/splitWhen'>;
}
declare module 'ramda/es/startsWith.js' {
  declare module.exports: $Exports<'ramda/es/startsWith'>;
}
declare module 'ramda/es/subtract.js' {
  declare module.exports: $Exports<'ramda/es/subtract'>;
}
declare module 'ramda/es/sum.js' {
  declare module.exports: $Exports<'ramda/es/sum'>;
}
declare module 'ramda/es/symmetricDifference.js' {
  declare module.exports: $Exports<'ramda/es/symmetricDifference'>;
}
declare module 'ramda/es/symmetricDifferenceWith.js' {
  declare module.exports: $Exports<'ramda/es/symmetricDifferenceWith'>;
}
declare module 'ramda/es/T.js' {
  declare module.exports: $Exports<'ramda/es/T'>;
}
declare module 'ramda/es/tail.js' {
  declare module.exports: $Exports<'ramda/es/tail'>;
}
declare module 'ramda/es/take.js' {
  declare module.exports: $Exports<'ramda/es/take'>;
}
declare module 'ramda/es/takeLast.js' {
  declare module.exports: $Exports<'ramda/es/takeLast'>;
}
declare module 'ramda/es/takeLastWhile.js' {
  declare module.exports: $Exports<'ramda/es/takeLastWhile'>;
}
declare module 'ramda/es/takeWhile.js' {
  declare module.exports: $Exports<'ramda/es/takeWhile'>;
}
declare module 'ramda/es/tap.js' {
  declare module.exports: $Exports<'ramda/es/tap'>;
}
declare module 'ramda/es/test.js' {
  declare module.exports: $Exports<'ramda/es/test'>;
}
declare module 'ramda/es/then.js' {
  declare module.exports: $Exports<'ramda/es/then'>;
}
declare module 'ramda/es/thunkify.js' {
  declare module.exports: $Exports<'ramda/es/thunkify'>;
}
declare module 'ramda/es/times.js' {
  declare module.exports: $Exports<'ramda/es/times'>;
}
declare module 'ramda/es/toLower.js' {
  declare module.exports: $Exports<'ramda/es/toLower'>;
}
declare module 'ramda/es/toPairs.js' {
  declare module.exports: $Exports<'ramda/es/toPairs'>;
}
declare module 'ramda/es/toPairsIn.js' {
  declare module.exports: $Exports<'ramda/es/toPairsIn'>;
}
declare module 'ramda/es/toString.js' {
  declare module.exports: $Exports<'ramda/es/toString'>;
}
declare module 'ramda/es/toUpper.js' {
  declare module.exports: $Exports<'ramda/es/toUpper'>;
}
declare module 'ramda/es/transduce.js' {
  declare module.exports: $Exports<'ramda/es/transduce'>;
}
declare module 'ramda/es/transpose.js' {
  declare module.exports: $Exports<'ramda/es/transpose'>;
}
declare module 'ramda/es/traverse.js' {
  declare module.exports: $Exports<'ramda/es/traverse'>;
}
declare module 'ramda/es/trim.js' {
  declare module.exports: $Exports<'ramda/es/trim'>;
}
declare module 'ramda/es/tryCatch.js' {
  declare module.exports: $Exports<'ramda/es/tryCatch'>;
}
declare module 'ramda/es/type.js' {
  declare module.exports: $Exports<'ramda/es/type'>;
}
declare module 'ramda/es/unapply.js' {
  declare module.exports: $Exports<'ramda/es/unapply'>;
}
declare module 'ramda/es/unary.js' {
  declare module.exports: $Exports<'ramda/es/unary'>;
}
declare module 'ramda/es/uncurryN.js' {
  declare module.exports: $Exports<'ramda/es/uncurryN'>;
}
declare module 'ramda/es/unfold.js' {
  declare module.exports: $Exports<'ramda/es/unfold'>;
}
declare module 'ramda/es/union.js' {
  declare module.exports: $Exports<'ramda/es/union'>;
}
declare module 'ramda/es/unionWith.js' {
  declare module.exports: $Exports<'ramda/es/unionWith'>;
}
declare module 'ramda/es/uniq.js' {
  declare module.exports: $Exports<'ramda/es/uniq'>;
}
declare module 'ramda/es/uniqBy.js' {
  declare module.exports: $Exports<'ramda/es/uniqBy'>;
}
declare module 'ramda/es/uniqWith.js' {
  declare module.exports: $Exports<'ramda/es/uniqWith'>;
}
declare module 'ramda/es/unless.js' {
  declare module.exports: $Exports<'ramda/es/unless'>;
}
declare module 'ramda/es/unnest.js' {
  declare module.exports: $Exports<'ramda/es/unnest'>;
}
declare module 'ramda/es/until.js' {
  declare module.exports: $Exports<'ramda/es/until'>;
}
declare module 'ramda/es/update.js' {
  declare module.exports: $Exports<'ramda/es/update'>;
}
declare module 'ramda/es/useWith.js' {
  declare module.exports: $Exports<'ramda/es/useWith'>;
}
declare module 'ramda/es/values.js' {
  declare module.exports: $Exports<'ramda/es/values'>;
}
declare module 'ramda/es/valuesIn.js' {
  declare module.exports: $Exports<'ramda/es/valuesIn'>;
}
declare module 'ramda/es/view.js' {
  declare module.exports: $Exports<'ramda/es/view'>;
}
declare module 'ramda/es/when.js' {
  declare module.exports: $Exports<'ramda/es/when'>;
}
declare module 'ramda/es/where.js' {
  declare module.exports: $Exports<'ramda/es/where'>;
}
declare module 'ramda/es/whereEq.js' {
  declare module.exports: $Exports<'ramda/es/whereEq'>;
}
declare module 'ramda/es/without.js' {
  declare module.exports: $Exports<'ramda/es/without'>;
}
declare module 'ramda/es/xprod.js' {
  declare module.exports: $Exports<'ramda/es/xprod'>;
}
declare module 'ramda/es/zip.js' {
  declare module.exports: $Exports<'ramda/es/zip'>;
}
declare module 'ramda/es/zipObj.js' {
  declare module.exports: $Exports<'ramda/es/zipObj'>;
}
declare module 'ramda/es/zipWith.js' {
  declare module.exports: $Exports<'ramda/es/zipWith'>;
}
declare module 'ramda/src/__.js' {
  declare module.exports: $Exports<'ramda/src/__'>;
}
declare module 'ramda/src/add.js' {
  declare module.exports: $Exports<'ramda/src/add'>;
}
declare module 'ramda/src/addIndex.js' {
  declare module.exports: $Exports<'ramda/src/addIndex'>;
}
declare module 'ramda/src/adjust.js' {
  declare module.exports: $Exports<'ramda/src/adjust'>;
}
declare module 'ramda/src/all.js' {
  declare module.exports: $Exports<'ramda/src/all'>;
}
declare module 'ramda/src/allPass.js' {
  declare module.exports: $Exports<'ramda/src/allPass'>;
}
declare module 'ramda/src/always.js' {
  declare module.exports: $Exports<'ramda/src/always'>;
}
declare module 'ramda/src/and.js' {
  declare module.exports: $Exports<'ramda/src/and'>;
}
declare module 'ramda/src/any.js' {
  declare module.exports: $Exports<'ramda/src/any'>;
}
declare module 'ramda/src/anyPass.js' {
  declare module.exports: $Exports<'ramda/src/anyPass'>;
}
declare module 'ramda/src/ap.js' {
  declare module.exports: $Exports<'ramda/src/ap'>;
}
declare module 'ramda/src/aperture.js' {
  declare module.exports: $Exports<'ramda/src/aperture'>;
}
declare module 'ramda/src/append.js' {
  declare module.exports: $Exports<'ramda/src/append'>;
}
declare module 'ramda/src/apply.js' {
  declare module.exports: $Exports<'ramda/src/apply'>;
}
declare module 'ramda/src/applySpec.js' {
  declare module.exports: $Exports<'ramda/src/applySpec'>;
}
declare module 'ramda/src/applyTo.js' {
  declare module.exports: $Exports<'ramda/src/applyTo'>;
}
declare module 'ramda/src/ascend.js' {
  declare module.exports: $Exports<'ramda/src/ascend'>;
}
declare module 'ramda/src/assoc.js' {
  declare module.exports: $Exports<'ramda/src/assoc'>;
}
declare module 'ramda/src/assocPath.js' {
  declare module.exports: $Exports<'ramda/src/assocPath'>;
}
declare module 'ramda/src/binary.js' {
  declare module.exports: $Exports<'ramda/src/binary'>;
}
declare module 'ramda/src/bind.js' {
  declare module.exports: $Exports<'ramda/src/bind'>;
}
declare module 'ramda/src/both.js' {
  declare module.exports: $Exports<'ramda/src/both'>;
}
declare module 'ramda/src/call.js' {
  declare module.exports: $Exports<'ramda/src/call'>;
}
declare module 'ramda/src/chain.js' {
  declare module.exports: $Exports<'ramda/src/chain'>;
}
declare module 'ramda/src/clamp.js' {
  declare module.exports: $Exports<'ramda/src/clamp'>;
}
declare module 'ramda/src/clone.js' {
  declare module.exports: $Exports<'ramda/src/clone'>;
}
declare module 'ramda/src/comparator.js' {
  declare module.exports: $Exports<'ramda/src/comparator'>;
}
declare module 'ramda/src/complement.js' {
  declare module.exports: $Exports<'ramda/src/complement'>;
}
declare module 'ramda/src/compose.js' {
  declare module.exports: $Exports<'ramda/src/compose'>;
}
declare module 'ramda/src/composeK.js' {
  declare module.exports: $Exports<'ramda/src/composeK'>;
}
declare module 'ramda/src/composeP.js' {
  declare module.exports: $Exports<'ramda/src/composeP'>;
}
declare module 'ramda/src/composeWith.js' {
  declare module.exports: $Exports<'ramda/src/composeWith'>;
}
declare module 'ramda/src/concat.js' {
  declare module.exports: $Exports<'ramda/src/concat'>;
}
declare module 'ramda/src/cond.js' {
  declare module.exports: $Exports<'ramda/src/cond'>;
}
declare module 'ramda/src/construct.js' {
  declare module.exports: $Exports<'ramda/src/construct'>;
}
declare module 'ramda/src/constructN.js' {
  declare module.exports: $Exports<'ramda/src/constructN'>;
}
declare module 'ramda/src/contains.js' {
  declare module.exports: $Exports<'ramda/src/contains'>;
}
declare module 'ramda/src/converge.js' {
  declare module.exports: $Exports<'ramda/src/converge'>;
}
declare module 'ramda/src/countBy.js' {
  declare module.exports: $Exports<'ramda/src/countBy'>;
}
declare module 'ramda/src/curry.js' {
  declare module.exports: $Exports<'ramda/src/curry'>;
}
declare module 'ramda/src/curryN.js' {
  declare module.exports: $Exports<'ramda/src/curryN'>;
}
declare module 'ramda/src/dec.js' {
  declare module.exports: $Exports<'ramda/src/dec'>;
}
declare module 'ramda/src/defaultTo.js' {
  declare module.exports: $Exports<'ramda/src/defaultTo'>;
}
declare module 'ramda/src/descend.js' {
  declare module.exports: $Exports<'ramda/src/descend'>;
}
declare module 'ramda/src/difference.js' {
  declare module.exports: $Exports<'ramda/src/difference'>;
}
declare module 'ramda/src/differenceWith.js' {
  declare module.exports: $Exports<'ramda/src/differenceWith'>;
}
declare module 'ramda/src/dissoc.js' {
  declare module.exports: $Exports<'ramda/src/dissoc'>;
}
declare module 'ramda/src/dissocPath.js' {
  declare module.exports: $Exports<'ramda/src/dissocPath'>;
}
declare module 'ramda/src/divide.js' {
  declare module.exports: $Exports<'ramda/src/divide'>;
}
declare module 'ramda/src/drop.js' {
  declare module.exports: $Exports<'ramda/src/drop'>;
}
declare module 'ramda/src/dropLast.js' {
  declare module.exports: $Exports<'ramda/src/dropLast'>;
}
declare module 'ramda/src/dropLastWhile.js' {
  declare module.exports: $Exports<'ramda/src/dropLastWhile'>;
}
declare module 'ramda/src/dropRepeats.js' {
  declare module.exports: $Exports<'ramda/src/dropRepeats'>;
}
declare module 'ramda/src/dropRepeatsWith.js' {
  declare module.exports: $Exports<'ramda/src/dropRepeatsWith'>;
}
declare module 'ramda/src/dropWhile.js' {
  declare module.exports: $Exports<'ramda/src/dropWhile'>;
}
declare module 'ramda/src/either.js' {
  declare module.exports: $Exports<'ramda/src/either'>;
}
declare module 'ramda/src/empty.js' {
  declare module.exports: $Exports<'ramda/src/empty'>;
}
declare module 'ramda/src/endsWith.js' {
  declare module.exports: $Exports<'ramda/src/endsWith'>;
}
declare module 'ramda/src/eqBy.js' {
  declare module.exports: $Exports<'ramda/src/eqBy'>;
}
declare module 'ramda/src/eqProps.js' {
  declare module.exports: $Exports<'ramda/src/eqProps'>;
}
declare module 'ramda/src/equals.js' {
  declare module.exports: $Exports<'ramda/src/equals'>;
}
declare module 'ramda/src/evolve.js' {
  declare module.exports: $Exports<'ramda/src/evolve'>;
}
declare module 'ramda/src/F.js' {
  declare module.exports: $Exports<'ramda/src/F'>;
}
declare module 'ramda/src/filter.js' {
  declare module.exports: $Exports<'ramda/src/filter'>;
}
declare module 'ramda/src/find.js' {
  declare module.exports: $Exports<'ramda/src/find'>;
}
declare module 'ramda/src/findIndex.js' {
  declare module.exports: $Exports<'ramda/src/findIndex'>;
}
declare module 'ramda/src/findLast.js' {
  declare module.exports: $Exports<'ramda/src/findLast'>;
}
declare module 'ramda/src/findLastIndex.js' {
  declare module.exports: $Exports<'ramda/src/findLastIndex'>;
}
declare module 'ramda/src/flatten.js' {
  declare module.exports: $Exports<'ramda/src/flatten'>;
}
declare module 'ramda/src/flip.js' {
  declare module.exports: $Exports<'ramda/src/flip'>;
}
declare module 'ramda/src/forEach.js' {
  declare module.exports: $Exports<'ramda/src/forEach'>;
}
declare module 'ramda/src/forEachObjIndexed.js' {
  declare module.exports: $Exports<'ramda/src/forEachObjIndexed'>;
}
declare module 'ramda/src/fromPairs.js' {
  declare module.exports: $Exports<'ramda/src/fromPairs'>;
}
declare module 'ramda/src/groupBy.js' {
  declare module.exports: $Exports<'ramda/src/groupBy'>;
}
declare module 'ramda/src/groupWith.js' {
  declare module.exports: $Exports<'ramda/src/groupWith'>;
}
declare module 'ramda/src/gt.js' {
  declare module.exports: $Exports<'ramda/src/gt'>;
}
declare module 'ramda/src/gte.js' {
  declare module.exports: $Exports<'ramda/src/gte'>;
}
declare module 'ramda/src/has.js' {
  declare module.exports: $Exports<'ramda/src/has'>;
}
declare module 'ramda/src/hasIn.js' {
  declare module.exports: $Exports<'ramda/src/hasIn'>;
}
declare module 'ramda/src/hasPath.js' {
  declare module.exports: $Exports<'ramda/src/hasPath'>;
}
declare module 'ramda/src/head.js' {
  declare module.exports: $Exports<'ramda/src/head'>;
}
declare module 'ramda/src/identical.js' {
  declare module.exports: $Exports<'ramda/src/identical'>;
}
declare module 'ramda/src/identity.js' {
  declare module.exports: $Exports<'ramda/src/identity'>;
}
declare module 'ramda/src/ifElse.js' {
  declare module.exports: $Exports<'ramda/src/ifElse'>;
}
declare module 'ramda/src/inc.js' {
  declare module.exports: $Exports<'ramda/src/inc'>;
}
declare module 'ramda/src/includes.js' {
  declare module.exports: $Exports<'ramda/src/includes'>;
}
declare module 'ramda/src/index.js' {
  declare module.exports: $Exports<'ramda/src/index'>;
}
declare module 'ramda/src/indexBy.js' {
  declare module.exports: $Exports<'ramda/src/indexBy'>;
}
declare module 'ramda/src/indexOf.js' {
  declare module.exports: $Exports<'ramda/src/indexOf'>;
}
declare module 'ramda/src/init.js' {
  declare module.exports: $Exports<'ramda/src/init'>;
}
declare module 'ramda/src/innerJoin.js' {
  declare module.exports: $Exports<'ramda/src/innerJoin'>;
}
declare module 'ramda/src/insert.js' {
  declare module.exports: $Exports<'ramda/src/insert'>;
}
declare module 'ramda/src/insertAll.js' {
  declare module.exports: $Exports<'ramda/src/insertAll'>;
}
declare module 'ramda/src/internal/_aperture.js' {
  declare module.exports: $Exports<'ramda/src/internal/_aperture'>;
}
declare module 'ramda/src/internal/_arity.js' {
  declare module.exports: $Exports<'ramda/src/internal/_arity'>;
}
declare module 'ramda/src/internal/_arrayFromIterator.js' {
  declare module.exports: $Exports<'ramda/src/internal/_arrayFromIterator'>;
}
declare module 'ramda/src/internal/_assertPromise.js' {
  declare module.exports: $Exports<'ramda/src/internal/_assertPromise'>;
}
declare module 'ramda/src/internal/_checkForMethod.js' {
  declare module.exports: $Exports<'ramda/src/internal/_checkForMethod'>;
}
declare module 'ramda/src/internal/_clone.js' {
  declare module.exports: $Exports<'ramda/src/internal/_clone'>;
}
declare module 'ramda/src/internal/_cloneRegExp.js' {
  declare module.exports: $Exports<'ramda/src/internal/_cloneRegExp'>;
}
declare module 'ramda/src/internal/_complement.js' {
  declare module.exports: $Exports<'ramda/src/internal/_complement'>;
}
declare module 'ramda/src/internal/_concat.js' {
  declare module.exports: $Exports<'ramda/src/internal/_concat'>;
}
declare module 'ramda/src/internal/_createPartialApplicator.js' {
  declare module.exports: $Exports<'ramda/src/internal/_createPartialApplicator'>;
}
declare module 'ramda/src/internal/_curry1.js' {
  declare module.exports: $Exports<'ramda/src/internal/_curry1'>;
}
declare module 'ramda/src/internal/_curry2.js' {
  declare module.exports: $Exports<'ramda/src/internal/_curry2'>;
}
declare module 'ramda/src/internal/_curry3.js' {
  declare module.exports: $Exports<'ramda/src/internal/_curry3'>;
}
declare module 'ramda/src/internal/_curryN.js' {
  declare module.exports: $Exports<'ramda/src/internal/_curryN'>;
}
declare module 'ramda/src/internal/_dispatchable.js' {
  declare module.exports: $Exports<'ramda/src/internal/_dispatchable'>;
}
declare module 'ramda/src/internal/_dropLast.js' {
  declare module.exports: $Exports<'ramda/src/internal/_dropLast'>;
}
declare module 'ramda/src/internal/_dropLastWhile.js' {
  declare module.exports: $Exports<'ramda/src/internal/_dropLastWhile'>;
}
declare module 'ramda/src/internal/_equals.js' {
  declare module.exports: $Exports<'ramda/src/internal/_equals'>;
}
declare module 'ramda/src/internal/_filter.js' {
  declare module.exports: $Exports<'ramda/src/internal/_filter'>;
}
declare module 'ramda/src/internal/_flatCat.js' {
  declare module.exports: $Exports<'ramda/src/internal/_flatCat'>;
}
declare module 'ramda/src/internal/_forceReduced.js' {
  declare module.exports: $Exports<'ramda/src/internal/_forceReduced'>;
}
declare module 'ramda/src/internal/_functionName.js' {
  declare module.exports: $Exports<'ramda/src/internal/_functionName'>;
}
declare module 'ramda/src/internal/_functionsWith.js' {
  declare module.exports: $Exports<'ramda/src/internal/_functionsWith'>;
}
declare module 'ramda/src/internal/_has.js' {
  declare module.exports: $Exports<'ramda/src/internal/_has'>;
}
declare module 'ramda/src/internal/_identity.js' {
  declare module.exports: $Exports<'ramda/src/internal/_identity'>;
}
declare module 'ramda/src/internal/_includes.js' {
  declare module.exports: $Exports<'ramda/src/internal/_includes'>;
}
declare module 'ramda/src/internal/_includesWith.js' {
  declare module.exports: $Exports<'ramda/src/internal/_includesWith'>;
}
declare module 'ramda/src/internal/_indexOf.js' {
  declare module.exports: $Exports<'ramda/src/internal/_indexOf'>;
}
declare module 'ramda/src/internal/_isArguments.js' {
  declare module.exports: $Exports<'ramda/src/internal/_isArguments'>;
}
declare module 'ramda/src/internal/_isArray.js' {
  declare module.exports: $Exports<'ramda/src/internal/_isArray'>;
}
declare module 'ramda/src/internal/_isArrayLike.js' {
  declare module.exports: $Exports<'ramda/src/internal/_isArrayLike'>;
}
declare module 'ramda/src/internal/_isFunction.js' {
  declare module.exports: $Exports<'ramda/src/internal/_isFunction'>;
}
declare module 'ramda/src/internal/_isInteger.js' {
  declare module.exports: $Exports<'ramda/src/internal/_isInteger'>;
}
declare module 'ramda/src/internal/_isNumber.js' {
  declare module.exports: $Exports<'ramda/src/internal/_isNumber'>;
}
declare module 'ramda/src/internal/_isObject.js' {
  declare module.exports: $Exports<'ramda/src/internal/_isObject'>;
}
declare module 'ramda/src/internal/_isPlaceholder.js' {
  declare module.exports: $Exports<'ramda/src/internal/_isPlaceholder'>;
}
declare module 'ramda/src/internal/_isRegExp.js' {
  declare module.exports: $Exports<'ramda/src/internal/_isRegExp'>;
}
declare module 'ramda/src/internal/_isString.js' {
  declare module.exports: $Exports<'ramda/src/internal/_isString'>;
}
declare module 'ramda/src/internal/_isTransformer.js' {
  declare module.exports: $Exports<'ramda/src/internal/_isTransformer'>;
}
declare module 'ramda/src/internal/_makeFlat.js' {
  declare module.exports: $Exports<'ramda/src/internal/_makeFlat'>;
}
declare module 'ramda/src/internal/_map.js' {
  declare module.exports: $Exports<'ramda/src/internal/_map'>;
}
declare module 'ramda/src/internal/_objectAssign.js' {
  declare module.exports: $Exports<'ramda/src/internal/_objectAssign'>;
}
declare module 'ramda/src/internal/_objectIs.js' {
  declare module.exports: $Exports<'ramda/src/internal/_objectIs'>;
}
declare module 'ramda/src/internal/_of.js' {
  declare module.exports: $Exports<'ramda/src/internal/_of'>;
}
declare module 'ramda/src/internal/_pipe.js' {
  declare module.exports: $Exports<'ramda/src/internal/_pipe'>;
}
declare module 'ramda/src/internal/_pipeP.js' {
  declare module.exports: $Exports<'ramda/src/internal/_pipeP'>;
}
declare module 'ramda/src/internal/_quote.js' {
  declare module.exports: $Exports<'ramda/src/internal/_quote'>;
}
declare module 'ramda/src/internal/_reduce.js' {
  declare module.exports: $Exports<'ramda/src/internal/_reduce'>;
}
declare module 'ramda/src/internal/_reduced.js' {
  declare module.exports: $Exports<'ramda/src/internal/_reduced'>;
}
declare module 'ramda/src/internal/_Set.js' {
  declare module.exports: $Exports<'ramda/src/internal/_Set'>;
}
declare module 'ramda/src/internal/_stepCat.js' {
  declare module.exports: $Exports<'ramda/src/internal/_stepCat'>;
}
declare module 'ramda/src/internal/_toISOString.js' {
  declare module.exports: $Exports<'ramda/src/internal/_toISOString'>;
}
declare module 'ramda/src/internal/_toString.js' {
  declare module.exports: $Exports<'ramda/src/internal/_toString'>;
}
declare module 'ramda/src/internal/_xall.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xall'>;
}
declare module 'ramda/src/internal/_xany.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xany'>;
}
declare module 'ramda/src/internal/_xaperture.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xaperture'>;
}
declare module 'ramda/src/internal/_xchain.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xchain'>;
}
declare module 'ramda/src/internal/_xdrop.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xdrop'>;
}
declare module 'ramda/src/internal/_xdropLast.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xdropLast'>;
}
declare module 'ramda/src/internal/_xdropLastWhile.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xdropLastWhile'>;
}
declare module 'ramda/src/internal/_xdropRepeatsWith.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xdropRepeatsWith'>;
}
declare module 'ramda/src/internal/_xdropWhile.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xdropWhile'>;
}
declare module 'ramda/src/internal/_xfBase.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xfBase'>;
}
declare module 'ramda/src/internal/_xfilter.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xfilter'>;
}
declare module 'ramda/src/internal/_xfind.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xfind'>;
}
declare module 'ramda/src/internal/_xfindIndex.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xfindIndex'>;
}
declare module 'ramda/src/internal/_xfindLast.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xfindLast'>;
}
declare module 'ramda/src/internal/_xfindLastIndex.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xfindLastIndex'>;
}
declare module 'ramda/src/internal/_xmap.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xmap'>;
}
declare module 'ramda/src/internal/_xreduceBy.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xreduceBy'>;
}
declare module 'ramda/src/internal/_xtake.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xtake'>;
}
declare module 'ramda/src/internal/_xtakeWhile.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xtakeWhile'>;
}
declare module 'ramda/src/internal/_xtap.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xtap'>;
}
declare module 'ramda/src/internal/_xwrap.js' {
  declare module.exports: $Exports<'ramda/src/internal/_xwrap'>;
}
declare module 'ramda/src/intersection.js' {
  declare module.exports: $Exports<'ramda/src/intersection'>;
}
declare module 'ramda/src/intersperse.js' {
  declare module.exports: $Exports<'ramda/src/intersperse'>;
}
declare module 'ramda/src/into.js' {
  declare module.exports: $Exports<'ramda/src/into'>;
}
declare module 'ramda/src/invert.js' {
  declare module.exports: $Exports<'ramda/src/invert'>;
}
declare module 'ramda/src/invertObj.js' {
  declare module.exports: $Exports<'ramda/src/invertObj'>;
}
declare module 'ramda/src/invoker.js' {
  declare module.exports: $Exports<'ramda/src/invoker'>;
}
declare module 'ramda/src/is.js' {
  declare module.exports: $Exports<'ramda/src/is'>;
}
declare module 'ramda/src/isEmpty.js' {
  declare module.exports: $Exports<'ramda/src/isEmpty'>;
}
declare module 'ramda/src/isNil.js' {
  declare module.exports: $Exports<'ramda/src/isNil'>;
}
declare module 'ramda/src/join.js' {
  declare module.exports: $Exports<'ramda/src/join'>;
}
declare module 'ramda/src/juxt.js' {
  declare module.exports: $Exports<'ramda/src/juxt'>;
}
declare module 'ramda/src/keys.js' {
  declare module.exports: $Exports<'ramda/src/keys'>;
}
declare module 'ramda/src/keysIn.js' {
  declare module.exports: $Exports<'ramda/src/keysIn'>;
}
declare module 'ramda/src/last.js' {
  declare module.exports: $Exports<'ramda/src/last'>;
}
declare module 'ramda/src/lastIndexOf.js' {
  declare module.exports: $Exports<'ramda/src/lastIndexOf'>;
}
declare module 'ramda/src/length.js' {
  declare module.exports: $Exports<'ramda/src/length'>;
}
declare module 'ramda/src/lens.js' {
  declare module.exports: $Exports<'ramda/src/lens'>;
}
declare module 'ramda/src/lensIndex.js' {
  declare module.exports: $Exports<'ramda/src/lensIndex'>;
}
declare module 'ramda/src/lensPath.js' {
  declare module.exports: $Exports<'ramda/src/lensPath'>;
}
declare module 'ramda/src/lensProp.js' {
  declare module.exports: $Exports<'ramda/src/lensProp'>;
}
declare module 'ramda/src/lift.js' {
  declare module.exports: $Exports<'ramda/src/lift'>;
}
declare module 'ramda/src/liftN.js' {
  declare module.exports: $Exports<'ramda/src/liftN'>;
}
declare module 'ramda/src/lt.js' {
  declare module.exports: $Exports<'ramda/src/lt'>;
}
declare module 'ramda/src/lte.js' {
  declare module.exports: $Exports<'ramda/src/lte'>;
}
declare module 'ramda/src/map.js' {
  declare module.exports: $Exports<'ramda/src/map'>;
}
declare module 'ramda/src/mapAccum.js' {
  declare module.exports: $Exports<'ramda/src/mapAccum'>;
}
declare module 'ramda/src/mapAccumRight.js' {
  declare module.exports: $Exports<'ramda/src/mapAccumRight'>;
}
declare module 'ramda/src/mapObjIndexed.js' {
  declare module.exports: $Exports<'ramda/src/mapObjIndexed'>;
}
declare module 'ramda/src/match.js' {
  declare module.exports: $Exports<'ramda/src/match'>;
}
declare module 'ramda/src/mathMod.js' {
  declare module.exports: $Exports<'ramda/src/mathMod'>;
}
declare module 'ramda/src/max.js' {
  declare module.exports: $Exports<'ramda/src/max'>;
}
declare module 'ramda/src/maxBy.js' {
  declare module.exports: $Exports<'ramda/src/maxBy'>;
}
declare module 'ramda/src/mean.js' {
  declare module.exports: $Exports<'ramda/src/mean'>;
}
declare module 'ramda/src/median.js' {
  declare module.exports: $Exports<'ramda/src/median'>;
}
declare module 'ramda/src/memoizeWith.js' {
  declare module.exports: $Exports<'ramda/src/memoizeWith'>;
}
declare module 'ramda/src/merge.js' {
  declare module.exports: $Exports<'ramda/src/merge'>;
}
declare module 'ramda/src/mergeAll.js' {
  declare module.exports: $Exports<'ramda/src/mergeAll'>;
}
declare module 'ramda/src/mergeDeepLeft.js' {
  declare module.exports: $Exports<'ramda/src/mergeDeepLeft'>;
}
declare module 'ramda/src/mergeDeepRight.js' {
  declare module.exports: $Exports<'ramda/src/mergeDeepRight'>;
}
declare module 'ramda/src/mergeDeepWith.js' {
  declare module.exports: $Exports<'ramda/src/mergeDeepWith'>;
}
declare module 'ramda/src/mergeDeepWithKey.js' {
  declare module.exports: $Exports<'ramda/src/mergeDeepWithKey'>;
}
declare module 'ramda/src/mergeLeft.js' {
  declare module.exports: $Exports<'ramda/src/mergeLeft'>;
}
declare module 'ramda/src/mergeRight.js' {
  declare module.exports: $Exports<'ramda/src/mergeRight'>;
}
declare module 'ramda/src/mergeWith.js' {
  declare module.exports: $Exports<'ramda/src/mergeWith'>;
}
declare module 'ramda/src/mergeWithKey.js' {
  declare module.exports: $Exports<'ramda/src/mergeWithKey'>;
}
declare module 'ramda/src/min.js' {
  declare module.exports: $Exports<'ramda/src/min'>;
}
declare module 'ramda/src/minBy.js' {
  declare module.exports: $Exports<'ramda/src/minBy'>;
}
declare module 'ramda/src/modulo.js' {
  declare module.exports: $Exports<'ramda/src/modulo'>;
}
declare module 'ramda/src/move.js' {
  declare module.exports: $Exports<'ramda/src/move'>;
}
declare module 'ramda/src/multiply.js' {
  declare module.exports: $Exports<'ramda/src/multiply'>;
}
declare module 'ramda/src/nAry.js' {
  declare module.exports: $Exports<'ramda/src/nAry'>;
}
declare module 'ramda/src/negate.js' {
  declare module.exports: $Exports<'ramda/src/negate'>;
}
declare module 'ramda/src/none.js' {
  declare module.exports: $Exports<'ramda/src/none'>;
}
declare module 'ramda/src/not.js' {
  declare module.exports: $Exports<'ramda/src/not'>;
}
declare module 'ramda/src/nth.js' {
  declare module.exports: $Exports<'ramda/src/nth'>;
}
declare module 'ramda/src/nthArg.js' {
  declare module.exports: $Exports<'ramda/src/nthArg'>;
}
declare module 'ramda/src/o.js' {
  declare module.exports: $Exports<'ramda/src/o'>;
}
declare module 'ramda/src/objOf.js' {
  declare module.exports: $Exports<'ramda/src/objOf'>;
}
declare module 'ramda/src/of.js' {
  declare module.exports: $Exports<'ramda/src/of'>;
}
declare module 'ramda/src/omit.js' {
  declare module.exports: $Exports<'ramda/src/omit'>;
}
declare module 'ramda/src/once.js' {
  declare module.exports: $Exports<'ramda/src/once'>;
}
declare module 'ramda/src/or.js' {
  declare module.exports: $Exports<'ramda/src/or'>;
}
declare module 'ramda/src/otherwise.js' {
  declare module.exports: $Exports<'ramda/src/otherwise'>;
}
declare module 'ramda/src/over.js' {
  declare module.exports: $Exports<'ramda/src/over'>;
}
declare module 'ramda/src/pair.js' {
  declare module.exports: $Exports<'ramda/src/pair'>;
}
declare module 'ramda/src/partial.js' {
  declare module.exports: $Exports<'ramda/src/partial'>;
}
declare module 'ramda/src/partialRight.js' {
  declare module.exports: $Exports<'ramda/src/partialRight'>;
}
declare module 'ramda/src/partition.js' {
  declare module.exports: $Exports<'ramda/src/partition'>;
}
declare module 'ramda/src/path.js' {
  declare module.exports: $Exports<'ramda/src/path'>;
}
declare module 'ramda/src/pathEq.js' {
  declare module.exports: $Exports<'ramda/src/pathEq'>;
}
declare module 'ramda/src/pathOr.js' {
  declare module.exports: $Exports<'ramda/src/pathOr'>;
}
declare module 'ramda/src/pathSatisfies.js' {
  declare module.exports: $Exports<'ramda/src/pathSatisfies'>;
}
declare module 'ramda/src/pick.js' {
  declare module.exports: $Exports<'ramda/src/pick'>;
}
declare module 'ramda/src/pickAll.js' {
  declare module.exports: $Exports<'ramda/src/pickAll'>;
}
declare module 'ramda/src/pickBy.js' {
  declare module.exports: $Exports<'ramda/src/pickBy'>;
}
declare module 'ramda/src/pipe.js' {
  declare module.exports: $Exports<'ramda/src/pipe'>;
}
declare module 'ramda/src/pipeK.js' {
  declare module.exports: $Exports<'ramda/src/pipeK'>;
}
declare module 'ramda/src/pipeP.js' {
  declare module.exports: $Exports<'ramda/src/pipeP'>;
}
declare module 'ramda/src/pipeWith.js' {
  declare module.exports: $Exports<'ramda/src/pipeWith'>;
}
declare module 'ramda/src/pluck.js' {
  declare module.exports: $Exports<'ramda/src/pluck'>;
}
declare module 'ramda/src/prepend.js' {
  declare module.exports: $Exports<'ramda/src/prepend'>;
}
declare module 'ramda/src/product.js' {
  declare module.exports: $Exports<'ramda/src/product'>;
}
declare module 'ramda/src/project.js' {
  declare module.exports: $Exports<'ramda/src/project'>;
}
declare module 'ramda/src/prop.js' {
  declare module.exports: $Exports<'ramda/src/prop'>;
}
declare module 'ramda/src/propEq.js' {
  declare module.exports: $Exports<'ramda/src/propEq'>;
}
declare module 'ramda/src/propIs.js' {
  declare module.exports: $Exports<'ramda/src/propIs'>;
}
declare module 'ramda/src/propOr.js' {
  declare module.exports: $Exports<'ramda/src/propOr'>;
}
declare module 'ramda/src/props.js' {
  declare module.exports: $Exports<'ramda/src/props'>;
}
declare module 'ramda/src/propSatisfies.js' {
  declare module.exports: $Exports<'ramda/src/propSatisfies'>;
}
declare module 'ramda/src/range.js' {
  declare module.exports: $Exports<'ramda/src/range'>;
}
declare module 'ramda/src/reduce.js' {
  declare module.exports: $Exports<'ramda/src/reduce'>;
}
declare module 'ramda/src/reduceBy.js' {
  declare module.exports: $Exports<'ramda/src/reduceBy'>;
}
declare module 'ramda/src/reduced.js' {
  declare module.exports: $Exports<'ramda/src/reduced'>;
}
declare module 'ramda/src/reduceRight.js' {
  declare module.exports: $Exports<'ramda/src/reduceRight'>;
}
declare module 'ramda/src/reduceWhile.js' {
  declare module.exports: $Exports<'ramda/src/reduceWhile'>;
}
declare module 'ramda/src/reject.js' {
  declare module.exports: $Exports<'ramda/src/reject'>;
}
declare module 'ramda/src/remove.js' {
  declare module.exports: $Exports<'ramda/src/remove'>;
}
declare module 'ramda/src/repeat.js' {
  declare module.exports: $Exports<'ramda/src/repeat'>;
}
declare module 'ramda/src/replace.js' {
  declare module.exports: $Exports<'ramda/src/replace'>;
}
declare module 'ramda/src/reverse.js' {
  declare module.exports: $Exports<'ramda/src/reverse'>;
}
declare module 'ramda/src/scan.js' {
  declare module.exports: $Exports<'ramda/src/scan'>;
}
declare module 'ramda/src/sequence.js' {
  declare module.exports: $Exports<'ramda/src/sequence'>;
}
declare module 'ramda/src/set.js' {
  declare module.exports: $Exports<'ramda/src/set'>;
}
declare module 'ramda/src/slice.js' {
  declare module.exports: $Exports<'ramda/src/slice'>;
}
declare module 'ramda/src/sort.js' {
  declare module.exports: $Exports<'ramda/src/sort'>;
}
declare module 'ramda/src/sortBy.js' {
  declare module.exports: $Exports<'ramda/src/sortBy'>;
}
declare module 'ramda/src/sortWith.js' {
  declare module.exports: $Exports<'ramda/src/sortWith'>;
}
declare module 'ramda/src/split.js' {
  declare module.exports: $Exports<'ramda/src/split'>;
}
declare module 'ramda/src/splitAt.js' {
  declare module.exports: $Exports<'ramda/src/splitAt'>;
}
declare module 'ramda/src/splitEvery.js' {
  declare module.exports: $Exports<'ramda/src/splitEvery'>;
}
declare module 'ramda/src/splitWhen.js' {
  declare module.exports: $Exports<'ramda/src/splitWhen'>;
}
declare module 'ramda/src/startsWith.js' {
  declare module.exports: $Exports<'ramda/src/startsWith'>;
}
declare module 'ramda/src/subtract.js' {
  declare module.exports: $Exports<'ramda/src/subtract'>;
}
declare module 'ramda/src/sum.js' {
  declare module.exports: $Exports<'ramda/src/sum'>;
}
declare module 'ramda/src/symmetricDifference.js' {
  declare module.exports: $Exports<'ramda/src/symmetricDifference'>;
}
declare module 'ramda/src/symmetricDifferenceWith.js' {
  declare module.exports: $Exports<'ramda/src/symmetricDifferenceWith'>;
}
declare module 'ramda/src/T.js' {
  declare module.exports: $Exports<'ramda/src/T'>;
}
declare module 'ramda/src/tail.js' {
  declare module.exports: $Exports<'ramda/src/tail'>;
}
declare module 'ramda/src/take.js' {
  declare module.exports: $Exports<'ramda/src/take'>;
}
declare module 'ramda/src/takeLast.js' {
  declare module.exports: $Exports<'ramda/src/takeLast'>;
}
declare module 'ramda/src/takeLastWhile.js' {
  declare module.exports: $Exports<'ramda/src/takeLastWhile'>;
}
declare module 'ramda/src/takeWhile.js' {
  declare module.exports: $Exports<'ramda/src/takeWhile'>;
}
declare module 'ramda/src/tap.js' {
  declare module.exports: $Exports<'ramda/src/tap'>;
}
declare module 'ramda/src/test.js' {
  declare module.exports: $Exports<'ramda/src/test'>;
}
declare module 'ramda/src/then.js' {
  declare module.exports: $Exports<'ramda/src/then'>;
}
declare module 'ramda/src/thunkify.js' {
  declare module.exports: $Exports<'ramda/src/thunkify'>;
}
declare module 'ramda/src/times.js' {
  declare module.exports: $Exports<'ramda/src/times'>;
}
declare module 'ramda/src/toLower.js' {
  declare module.exports: $Exports<'ramda/src/toLower'>;
}
declare module 'ramda/src/toPairs.js' {
  declare module.exports: $Exports<'ramda/src/toPairs'>;
}
declare module 'ramda/src/toPairsIn.js' {
  declare module.exports: $Exports<'ramda/src/toPairsIn'>;
}
declare module 'ramda/src/toString.js' {
  declare module.exports: $Exports<'ramda/src/toString'>;
}
declare module 'ramda/src/toUpper.js' {
  declare module.exports: $Exports<'ramda/src/toUpper'>;
}
declare module 'ramda/src/transduce.js' {
  declare module.exports: $Exports<'ramda/src/transduce'>;
}
declare module 'ramda/src/transpose.js' {
  declare module.exports: $Exports<'ramda/src/transpose'>;
}
declare module 'ramda/src/traverse.js' {
  declare module.exports: $Exports<'ramda/src/traverse'>;
}
declare module 'ramda/src/trim.js' {
  declare module.exports: $Exports<'ramda/src/trim'>;
}
declare module 'ramda/src/tryCatch.js' {
  declare module.exports: $Exports<'ramda/src/tryCatch'>;
}
declare module 'ramda/src/type.js' {
  declare module.exports: $Exports<'ramda/src/type'>;
}
declare module 'ramda/src/unapply.js' {
  declare module.exports: $Exports<'ramda/src/unapply'>;
}
declare module 'ramda/src/unary.js' {
  declare module.exports: $Exports<'ramda/src/unary'>;
}
declare module 'ramda/src/uncurryN.js' {
  declare module.exports: $Exports<'ramda/src/uncurryN'>;
}
declare module 'ramda/src/unfold.js' {
  declare module.exports: $Exports<'ramda/src/unfold'>;
}
declare module 'ramda/src/union.js' {
  declare module.exports: $Exports<'ramda/src/union'>;
}
declare module 'ramda/src/unionWith.js' {
  declare module.exports: $Exports<'ramda/src/unionWith'>;
}
declare module 'ramda/src/uniq.js' {
  declare module.exports: $Exports<'ramda/src/uniq'>;
}
declare module 'ramda/src/uniqBy.js' {
  declare module.exports: $Exports<'ramda/src/uniqBy'>;
}
declare module 'ramda/src/uniqWith.js' {
  declare module.exports: $Exports<'ramda/src/uniqWith'>;
}
declare module 'ramda/src/unless.js' {
  declare module.exports: $Exports<'ramda/src/unless'>;
}
declare module 'ramda/src/unnest.js' {
  declare module.exports: $Exports<'ramda/src/unnest'>;
}
declare module 'ramda/src/until.js' {
  declare module.exports: $Exports<'ramda/src/until'>;
}
declare module 'ramda/src/update.js' {
  declare module.exports: $Exports<'ramda/src/update'>;
}
declare module 'ramda/src/useWith.js' {
  declare module.exports: $Exports<'ramda/src/useWith'>;
}
declare module 'ramda/src/values.js' {
  declare module.exports: $Exports<'ramda/src/values'>;
}
declare module 'ramda/src/valuesIn.js' {
  declare module.exports: $Exports<'ramda/src/valuesIn'>;
}
declare module 'ramda/src/view.js' {
  declare module.exports: $Exports<'ramda/src/view'>;
}
declare module 'ramda/src/when.js' {
  declare module.exports: $Exports<'ramda/src/when'>;
}
declare module 'ramda/src/where.js' {
  declare module.exports: $Exports<'ramda/src/where'>;
}
declare module 'ramda/src/whereEq.js' {
  declare module.exports: $Exports<'ramda/src/whereEq'>;
}
declare module 'ramda/src/without.js' {
  declare module.exports: $Exports<'ramda/src/without'>;
}
declare module 'ramda/src/xprod.js' {
  declare module.exports: $Exports<'ramda/src/xprod'>;
}
declare module 'ramda/src/zip.js' {
  declare module.exports: $Exports<'ramda/src/zip'>;
}
declare module 'ramda/src/zipObj.js' {
  declare module.exports: $Exports<'ramda/src/zipObj'>;
}
declare module 'ramda/src/zipWith.js' {
  declare module.exports: $Exports<'ramda/src/zipWith'>;
}
